import time
import requests
from bs4 import BeautifulSoup
import csv
import os
import logging
from math import ceil
import random


class LicenseCrawler:
    def __init__(self, base_url="https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/", output_file="result/result.csv"):
        self.base_url = base_url # base url
        self.output_file = output_file # output file
        self.csv_headers = ["Full_Name", "License_Type", "License_Number", "Status", "Professional", "Issued",
                            "Expired"] # CSV headers
        self.existing_records = set()  # To track unique license numbers
        self.headers = {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'content-type': 'application/x-www-form-urlencoded',
            'cookie': 'AspxAutoDetectCookieSupport=1; ASP.NET_SessionId=venhofdmjistnrcijhkb4i2o',
            'origin': 'https://www.pfr.maine.gov',
            'referer': 'https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchIndividual.aspx',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
        }
        # User Agents
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        ]

        # Different Proxies
        self.proxies = [
            {
                "http": "http://cruexuku-US-rotate:c3h2jphwjv7y@p.webshare.io:80",
                "https": "http://cruexuku-US-rotate:c3h2jphwjv7y@p.webshare.io:80"
            }
        ]

    # Function to get random user agents for headers
    def get_random_user_agent(self):
        return random.choice(self.user_agents)

    def fetch_page(self, letter, license_type, max_retries=3):
        """
        Fetch data for a specific license type with retries for the request sequence.
        """
        session = requests.Session()
        base_url = "https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchIndividual.aspx"
        proxy = random.choice(self.proxies)

        headers = {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'content-type': 'application/x-www-form-urlencoded',
            'cookie': 'AspxAutoDetectCookieSupport=1; ASP.NET_SessionId=venhofdmjistnrcijhkb4i2o',
            'origin': 'https://www.pfr.maine.gov',
            'referer': 'https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchIndividual.aspx',
            'user-agent': self.get_random_user_agent()  # random User-Agent
        }

        lastname = letter
        payload1 = f'__EVENTTARGET=&__EVENTARGUMENT=&__LASTFOCUS=&__VIEWSTATEFIELDCOUNT=17&__VIEWSTATE=AYbtzv19UDOF1WL3josya73%2FtaVXNPmfoQfFrHjA8PV61NGFUKIVUGWjJ8Epnm91LOtcxLv9gRFQJZ9TrU5v1E5psWF%2ByZVsYdEfu5EmZOrbCAPE%2BC9%2FCCGNHYKt34%2Bg3nM1ymMTOLN%2B4yOZZmA5vRMSO6mLWng8jqRvl5lTQEa4tWE9cgLSJKGll%2FQB7AZ97RzPsJGpWt6BQis1xmiqh8K%2FafJ0qv32p7lf90BtvJqzADO%2F3nJOVCKEcOf1yAtmpSK6yGCaSTgiD3BeEwcyeZXtx%2FkYbbEpOBn4pMcFmDqHX1F%2BuVumWlN39pYyiJRO3NsFHmP68QTaEKarcYdIrHSQ414Bq0XDgN%2FWuf0zcJ%2FsqXYTxHmp34SVcfk8%2BzvCGDqS32BJyoqBV%2B%2FOIfHoskCSIEBiMccBDd1fHQg5R75A1j2O2xUyGwWPIO8Yl317x67hjWvHlgjuut7AGKTAdUfjG6l5wrS3GsM2zjL%2FH8%2FNtuGzPekUv2JC8RNeo6VPcfCd1gOr8Gp0%2FOCZGh7qL3xJQ34b0HcOsW2eMYRHjFY9qcbzd7wzKxAvL0Xg%2BWnFPAaHmd9qUeyVBBUkUC7bqQoa8fSWFP7kIn4ptzQ7G3Jk0D%2FNnjESWFmYHa3qVN7rgCJfq2Xin5uotkJTo0jKRh%2F9p8VGVsJI%2BG2jHU0TsYPxW28Y7quIpqPp7z9vmn7SV4AgugENUjZNyWpgLjcrPq3oVNGYC31OSoZeZx%2FRRZ56e38YcnoVBhfWhSwsFLgtzuTI1TAD5RVAAmUBs79eT8r8v0m85zmxJXFwgJFdMCiME0Sq7y2F%2FGXfWGBQEzOSNEBCDJ3IMKOIUXgQhVLuqcW7yzYAsLh3sOo02XuQH9OpZFAQz1S%2B86CEFm5GFs0fs6H5W3HW4w%2FNhWj9bPWTN2mqh37UNClXJ70Y4yXz92cQRbI50i8bV4YISKzcLvYZTHTd6WV9MfIsR0a5Rg7hk2uW1%2FYXfyy8hdYnNPtXNiU57nPaduEJKSosTvJbXLbl&__VIEWSTATE1=Wox2lfNQgQ5lbqj1p6hohGaXRr%2F5YPdGKB6nVQPsPlpF68wd4on6qSHOlrDwADH9WSCIcNmmMOVj3Wfh4KO3dP3g2r4asgfPAknbrxmM0z1H0mroH4FsqDqQHj9hSvQqTb4Ds8%2FOh2dVzUu3xs%2FaeRzz9ihGzuNu5HHrAnrn2dZNC%2FO0Yb11A0VrECoAiovWbw%2FDut9S3TsjXK%2Bl5V1Q20FA8l9PwyBdXOzphqDO7uoRUH%2F4tPlmlJDu509iatcdTd3a4Jibzc0FV3v%2BTaKQ3bR7G1y444%2BDwkKL5xiIo1oYA6rV1MnNBUgRort7LgMPAZVOkgYevWYbdTQZJk2Scr89vMPNjvBNIXTzRTtObe2pC99H9VwmCtC8KcuVLHlR9FiC2vwtfl3MvTA9eUXSQUXBv%2By4Mxi62YQWAYl5zv%2FNidlSZHQ6Fvq9cM%2BbJZirpyf41D74a93xF9qFXC3aH7U3RkMa3Sz9nUp2RtvtEZDuAp6VaveWWQFkcanQe2qv%2BeUa2njIUf4WBO4u86yIVIwqKazgC662mfJylk0SOXBChiAufFxj0oGd6vbD%2BMnO6Z1D5ceWCkSMCXc51Tjb8KSVHqHO%2BeC9vnUYce12J683j%2FwwVpTtYU9FPBXpqxBZmM8CdGbYVyPOefCAXI0nr3QL4IER8IZsKRA%2B2lJ%2BDP12lWv2FhPHGicYsqI2AGljJGGuW7CFvAPkNW5zFiMfeGPBrrPsA4MPcS4rEVQ07I%2BtvhbyNBWbCwmayJkRDWW9othZiB%2FLzCTMs5HgQd%2FycNPkbxLgh%2FzH5eOFQlzjVlQeSKz7%2F2xxm8LbYQMwn2H%2FTAsA%2BFMnE1%2FXjItpdEJPESIFgO6KoY5TI%2FcybEjMyBHm%2BvKxZdNeUb711VnaXmefi%2FAu%2FAVAV5ME%2BvBIEhcNr9Ry9VLWCEh1rzEJBA%2BLJ%2FFY1M0FLtaIRxwRRNBbXVpAH8%2FMSDfay9SJUWsOYyIwyahsIAd9XFzsqlxCRiNBdKiEulncqN4cHyfobo%2FjuB%2BM&__VIEWSTATE2=lpxIqVb6sLHmpxyy2snTHaxT6uVVCR0W6GJsKcNiJOdH0yMPJARkOpYpnG3tL%2B7x9MoBUE%2FYJ2OQRTk0Rq3aaPyziiBnPTXWWliTXJRodFgt%2FDC11aTits7%2Bhg7lWuo2SpsSukSkCeYGeWie%2BuVtXmsM7VOuVMqGlVo5oJ%2BolhFoqtr%2B%2Fk2UoZTx5RhQ%2Bj94DvAnxc9Yt2DowRXb1H3wyyTHhrzBocFNzUkebU5KOI%2FvVeuT4ZM%2BdL6i14JfLZyqt2qrSAC%2BLkWo2%2F11zMYruraIUbN3v%2BZAP%2Fa8YHS%2BvKqLjbBmpDbEHxOWMdzA2RJ470BtrFyKASIDK5SmEg4F1g0tXpLIEsWSdXKu%2BGqJgWQ5h5iTycIWKHxi%2FYLCVnb6yKwNyj9ES1r3QsuiS1pbZK5Krqa41gdjMf9UApJPzbpu7kgmPyekIz1rR8oU5k%2B3sSwvsg1l9QOQ2xQViROr5jx73fSqgxdURbHysiCOmjm8FGIU7ky5eOQMf7H%2FwDh5n9EdUzRlbzY6UjiCqrb3uNW5N5AoK6EixWrxOHicqOiAKV0x9Qf%2FecW8Hf9mBhauQXf2M%2BML00sF9eG67PRxQVWrJMPFb0wlNSs6ZRToPayfN0r3pAXblr00W5yYgDOwWWujcHLteCwIemu%2BPwo1yh58w1jPZ6Yffljz6DFSQ8mwFm6g%2FDvrCODx7HmDVOCuCDV0NZ6oLbp2BeRVaR%2BMmcz%2Fsyb7HGzqkdjP4ue7W8QwW4d1Zod2KW%2BlcKUVY2hu3KuhnluBrTrJA9jyl3vPsx84yf7abnxHr3hBX%2BO93J%2Bax8HLl5zwZHKeC1aZZDVdwBMhsj2E6lk7294iaALL4EmQRh3FFrfDZdANsVKVh4pPwIPVTgbQC29fUBGtHF9qFwWl68XnrHS7WSyA5byRPGU59lCZmkhk33QndpyNyNaCn%2FzxdF%2Fk9EdrMPxG9pZ%2FV83CKkFjPD1fkzPuL9ed%2FeTmCgo9Nny8EPtgkk7ymgGlayL7jI5942IHBUX79RMe&__VIEWSTATE3=7q1BKHw%2Bb2fb%2B7yofuVI9wmcvJYEoHc0oi692%2FZtgdEEL9eSNMjq4lTfo3DxnoQ0ecWE40ddNGKnoN%2FaGLBIhGuj%2BjvzQqW480DbDAjPJDb1%2BlMcbSFAwBdshyFwtAAUKdeu0IPvg29l5zcWiaWzsd1exbAvBDyk3z6%2F3d12ZJtZOOpdriyyjXFaT9FDCPk0HEPkt1boV3xSGSrTU3Ns%2Bpjq2pzCX9yckmNFsxu7vHqaUGFkIUU09%2Bs%2Bn5NWb%2Bsj9SqjFv8qzIF9Rmi0H5%2Bhp%2Beh745XN%2FqGjMZRvPWcS5l9ck78N6XhFtap6iylVS3XJ0vCTIx%2BDbTGe2NL3oM97FCAKeMemu9wkyOwKPEv7wZGHp1oleBoWU3vM5J6Tw2fgqbBXG1Hq9QsVy244eAuv%2Bj%2BNinmqQlW7%2FfvB0zr07FBapovzNlDbJh7m99Aa7EM88M2qij8u3bqNzVdDUFNUMnaOvYhaUNapMF4FyTyHQdW%2BZ1XwBwX65jKeA%2FvxxiL%2F%2B5ZB4wayhYFE4aOdTu4kMmddOUICUkznzxL%2Bfb9BTa9O6gHr%2F2N0b2QDHQzA6HWdkWiQVR4ixUYNGDcsup3KnU3Mcien1Qc8bsNw5JL%2FH%2BKeLOIYSr0SIh4%2BUTVFKa8yeEcf0cVWgbAJ3RVMz%2F6Ym4ox7IZosuRGV0lWxREFY8tbpV5oK75J%2Byi1I1GPPooRtCZ3iU6STNaGCIWnI%2BOTgl98URjtXptDzOhbSw0KAygK87dIDanfaQ80HjtJlKJl5JBL3T5MRlC9e3MDI%2FGNvEwnUuWoYczqSMLFC8kHP5X%2F8bW1PS5HKkJcaHj1veTC89aXZsURqHHOdk12HEUQczl1ohWnjBU2dXcoX14JSMtUBx4BmGLQxjq%2FmTI%2B4D8WTwZGkgbkvuO%2B1h%2BzqBNjY9XT7J3B7aFwaKpZY895pfEvC0eirh%2B%2BhCwT%2FomLCXGo3fwoWE%2F6v8XFLKIvRShtDm7gg6efm8GExSNSjRGQp6yxJwWpUWevQWefCxtcsrs&__VIEWSTATE4=cHuZJzg4gIP8URWgdQPB6WefFnUrHGFIlbI4kpEfWZJlcu%2BKzMtJLwBTNq4n0ICy%2BoJ3YjcRi6M%2BubNQBNemRF2RUp3MLe3EiCtlP%2FO%2FybURekX39X15huRzLzFZLw6BRnZMrlVodIb4Dxcs2DReaYrOrfl0R7pgKI76JcyiHtg62DCX5xTAGxQc8Efd%2FHwgrYR%2BfKnQ6WIgE8LbrtvCHP2Zpbs6mHJd%2BnS61IdvC3hV1XpEKlEFdFdWo%2BUr8B1wuHBfM5ms%2F%2FTb4O4uF31jeuW2ZR66ZalX7uLC4KCT%2BCodnm8FXWdkZb8UDpuzGkKt6th37kjx2t4m12UxmaI93GKxKvIUHdmkwFJR30RV3qIYmQBAU48KkljZYznkIDSTfgxm76EuxG%2Fi4NQXOL3imjelVub7sa60NeUoMT4lQBZnzs65GEGjNJXaiITQqeLIp22bL9LTiiaxyl%2FTFFMavVxEC6p%2BQOyyzqOvFAPHEyZB5DMM12LhUvnNwA4hGDB3nJCkFhNVOMiYwYAzvDO%2Bn3XgW2h2U%2BqKGOoMOlA6dyu6acxUQmpDiZyibdKTGgqJILF%2Fv6UGoi2gvJgqj6y4fXWlLhZT734P%2BpZNWsF%2FHTtZh0BlRv2G9ja01QZRjs%2Bua5C25sW%2BTXYgtN3TDMgWTE0gx%2FvIwKWw8W2WnZwehspTffZPOBlJ%2BwKdzjj%2Bll6ZG9PPf2E6FcpLZJnCiEn6YLBJWSYluSZpLcrGZ%2FsPhxN%2B2zJPd7Xq47gNazjiIV4BstP7OeC2kAb%2FjyjAJ7VDkGN7y1M8yLKStCAeKzdtBX5CnRsgKeQQ6e9LKWRBxhroIzMNTIur%2BmY7NG4HMHjcNJjz3gxQ6NO0XjNc7xozF7i8FtOAe1ii9aHJPDFTgu3mUgbmjDY4Fdm4DenioOgknFVmlbb4C7ZDhagDt%2Fj9Px1OimcxExrTm3opwmHGGQFfXYctf2ZV1Z7eoze%2BhYCdy7AgzTCtxCkYwCK0LzROneioL%2Fxx90PMQa9y7EsIbbuZ&__VIEWSTATE5=5%2B7DhTwIhu4McgKxH5kxNsyakejMnub6m5xbVnd0utAnzzoM4kMDHzL2oomGnCO2uRVIMmrmlNdTmHbgs9zsvbyQcQIMitapZiResf1yxpQKvgjKqzlYvJTVdmlMJqb1Tft1PCSOTxAT0Dz4YUp6AZjqo4bo4wz7XsiwpBDhWbAHi7cUnmzrSnee5kU0bRy5P8098JrE2gUvBKb010yQ3jBokr7lBWako2Euk4Dk41u7YJqo4PyCrY2djvFcoFMViU3jUXhgKleJD0%2Bx%2BCsjfETg%2FBq8%2Bu9deC9j2veN2953pcrPpNX%2B%2FAkCzrKNPKb%2B4QFy35f8l8%2BvfOs%2BsjXGmppi6mykixgzXbckphmYdRbYN0%2BSjyygSK9eoj%2Fkj7A2gDYqFeOBIEumIaxby7U0KXSldt8yDihN4iVecKOj%2B%2FBxsnkilylX2wRQQ58yxYD5ugHPrcPVVdAhCWI3jdf0AwXmqDScvR0nSXHfIf0mKNW%2BLlYGhOsKMKzoq3Bc1%2FDqvvZ1iuTD%2FPHJJha5CMz6WgtirUQHDoCZjEcQrToZ6p1fD1fqRt63a6lnL3337WUeXLOus1ymbk0o8LBEtqWVPOH9apsN%2Bs7MzOHRsqjHZPrrudxNw5f%2B%2FZsg1mLIZ9yxShd43o1%2FIMVPb5Iy3%2FSmvXfMIC092UekPfgv90peiTJUf%2FWo0HBPHStNMfMW38NKdrWhI6aWvyaerHgVtvdWNpU0KW27FJckvYflgUdhhQZWEJipC4xiqgCfa6haQyLPCxtrVGjb438Nl7oNsQ8SFwIw0FvnUC1ZtTt42K%2BkTMdOJRtmUs3ztEm%2FOGZLoG%2BVbpaBRk%2BXxEVGpEqb%2BuXFw2Avb8WC%2BG1swIUm9cVN4ppbtH9QlgvEixY0g6lzsm0yBn5d7O3%2BcvxumRDyep9pNZpAzy3TZrhDArYz3zlQZGK3owOZrFJ658aR%2BrS%2FyzfhG8k5u8MymwWspGM8QEuIJiyJRlkx2xT%2FUIAbG8hr%2BOYcb8f35vxB3kX%2FWgSRBmPf&__VIEWSTATE6=RQarUJRMnpIiE4Hb4UxDpbbLWC7W2NFs3T6DuBVVwpihzNtVP93s%2FetVeW1OFpHX58hAbGsb%2FydgiJDFiP8b1P6Z3ZUZggNJmHvRLgOaU633XXrDpBv8hSnE2Rj9yNwLWqaPSwCIy0yeVg0fgnlDWFt74nb%2B6O%2Bf9YdWy1gJuSTMJc%2BYS2nj4d30HCaVDumdmlYWEPE7B7aJAFwZ7gF%2F33%2FMYmU47NGqoeNm4pOqsvmjSm%2FXZZLwiSiEcPOTEFSMLWaw%2FYMweHOquAo1wCp2xkd1K6slGlr6kQsRGDm%2Ff7PdYc1bmvHXslUelrJ8k7gqUrjYPiU3tEvbIuEy55mckkssc5gsrblR0hPRovuhHExUz8fiMTCxrYicZ3vNWVy22aVp5wK0ObVoNsh30Fz1EbOCUqnHN2Ep%2BFuS7SmcArI54Olvr54K8IM0M6gJKVODkk8YYHPnHxTmiP9iDRz4ZKfZ3tGPqtnowUt22ruW%2BHbAzgX2%2BqzXxAlPJid7eM0NctK4K2j0xmYqVB6Azn%2Fc7FbbZwG9XXy%2Fb3T%2F4UgPpwPk2Py2d6VucqqKwve8gK1jRrHVfbucapNKcuk25qq7PLNTWi7MBR%2Fz9q0hhWUeTG6hpMYPY8T5HInz6vLZoMzZz1Oo9EIE9mbXDpho7hD%2F6AUDKKDkGvpC%2FSuTZpZCXKE25sXhez%2BqYW0ekLBvksozdkqPkNJVfBdFJ8VP4RV0qrrITHzRvAlvAhYbljdNfyQUEpq7ZW9Vk2hb0SMzGtezISRrQO%2FxXmvgc6NEcRxogcuZtTRg2QETFiG3zLtcQpu8I5QqNgDbxUZcozeqVkjTSpA9HLvoUGPq32IrKk1msoo%2FDarsNayq%2BVV0%2BqpRPH63VoS1yLudo%2FZR5Ykxy3nQzRRGS0MkS6qADY3DsEDwtLNvWRZ5lK9zvsT%2FKoaF2VN1%2BGcDAH5oTuhwl7c3y1nkt%2B9ppFwcvbhEWijy2ocWRdogBHtKtL3jbzGKNwFCPtDCJevPSih6zow7jYUcNYRA&__VIEWSTATE7=%2BY7ll0%2BsPLHkgB%2FNnqf3AJZn17QIo%2FP%2BiJI%2BDmH8Bl%2FRe0ad0EAvZGJXssqraYvdF5%2Fp9LWWoBca%2FkT3wHSMZDoYLxdG8Q8qvhpQZzcvbetak0J2NN9LRc%2FddJIZhlZ57AnEu7RUQ34frGhepjuVVx%2Fslx%2B9f5HhS0ENyMeqLYwfjeuxqij63pQnsSTR2%2Fo5LsohTZpJfxUgrugy2pcleF06%2BY4%2FkzmUqhvRAeGlbwpf6w%2B%2FqpI1uQKm%2BGpAWfNfL9Z7Zy2DrXnGKPbbVW4M%2B%2BPxlPrUU8FGIgd0BY1EyMMdPE4LTLlLpKSrUWx5atUIJ%2BXT94pz%2FtmOpqXFkaS0A8Px0nHv0kyN2EO%2FVLHPvoXryid0eexXiZfpJk1S2aIV2KHJtBRcNoHmUk7ZBidR3tlkD06K9phLeeWG55nHg09i7yQ%2FfB3bnmiWCu7M5gHXuKtb9C9aLXwS6QoJP3B8OuxljQFYm2CCXc6qiOHHvMMo6iyzMhqEoJfC5KHSNa7WijALrbeVZQKmbyZvpz168xB9SL3jEHbJT9I9N8En0slZle%2FIPt7j5FgHNLuMKGIre%2FXVC90yJhKxxd77%2FZJwBLFs6A0qADzvpQt%2F1MqTN5tg%2FB9Q%2BuGbeSjlT9FTsEL90Kvb78gvl398%2Fx%2BQGo0aoRtsgYbv3fPuo1xsm%2Fsgs482rlGZcPCH6pvRZHkeAyvinNWMXfmaUVXlFgKHGbNJHdQC3lj1gjdWc3LFDimfcvK4E3VGKjWNCi16vYRY172y5%2B0DUOlkS4Ew2i1Du%2BIgNHesicip952q0M4TxPXomn84bHbIxkWEJbEu%2BLDZOpCq%2B4xQKVgnnuNdJNsP2167n7bGH6uwKg2azYzCd6zJRP2ZJAh56zSU03a%2BUO6LIqC4annKlQMuVVIFIptwhrz2Tc0sdP4YHDdzSgtDBaK93rJ7WGiUbLsGjiI7b4Fw4Q%2BsI0et1op3fBZN2rbe8u5JD6iiBod9P14T10bcNiJ4b%2BdXhvJgSSlkvvU7h6%2FY%2F602&__VIEWSTATE8=JwFWtFEk1fOaLeHWxiKXQYMQClABLlEirVsTRZtXwlfhY%2FAQfCPLDr1j9ewt6O%2FI1PejHaeumWNkznHzc%2FiokHejbFUDPvY1VTfV4vIF5IJ47sRbkPVMEqZ7HE3KpcAGmYc9nobN3Fp2hSZUBy%2BRk%2FgFZ33z3Jf69KpGs3pD2ti%2BmdHXV1l7ESaE7f4CszTstl22eldf2sAhhH0EPx2GaRCxIKxOXn7BQr0CUxQkiN0e%2FBqbBOYMYlE4fogbOPfXdR73KVxsvxn32if2E42qHTSgcP2xNCOsNBwkq1A62rkVNAneqPITO9zVQ3%2B7A3M7mBCgmFwP6WBh1XXgmF5jTSa%2BRNHxqKjZLAtDxdWdexWIJu95HL%2B%2FB%2F1yutw9u%2B9C5ivB5ZaN4AoG0DRZQEuTTIQjH3Lpygy2zLA9LNgKPzyVRHHLqXtStXFzK5HMtROHUqfNma9kwX00zONnahT%2BUcIsIrjZPVBi%2FjjyRbQAY91MR3%2BwwKU2Qrza4JeRyIKc2AIzIBf4IgkmR2XFFFeuniEPYCOxJGAXcIKAwDxz4sh1ABog%2FcsPTJw3JDUCCYoMt%2BOCjwLAp01k4nbCJtT82xWUY18GMTwn5a6EMfskgjvWIq5YPgD%2BUHKTHsOmIEa3rlt64c%2FaZM2LNWD3rHnAvju5Qq67eVjcdAPtrUA1e0IVZZFML7yVmy7yGxOFU9qvI1IM7VYVw6GaJ%2BEJKyZoLbcZwf0y5LVfuJX5U8srLaRdn1HdXkYQCSnTGelUARSSY%2BxnKvG2rWYhThFJU5mjwkowwWIeMfxX%2BgrjRc8PBTSLygWNFSVvrOWXiWgeYXf6F8fDJ2IJucElBme6bxv0Ec%2FBqGAlvnwAo%2BKzLIlYURRu3rIjIdVQPhIEFgYH1ivq9PMb2CExQD19bmOKJTUW7kCTefMRf9y7rvK77yRcjqrC9FiJbkM3xeIdCwfaIx%2FC%2Bl8zo4mJ7p3kSCNTdZRlvlnXCNSih2FjIDBJ2ot1CMMvzJChc0UQCaOkhgCM9FVj&__VIEWSTATE9=gGl4CI60%2FfVPsFlg%2BCiwApn65vzwfhMASlJMH7D52W16tNLgOCo9ms9gQ%2FXYiHnG%2BGxeJU3nYT8OBKJRDF2T%2BuCxYL5ITjyhma%2FM2CX90i9HomOhc%2Fm2acQS89hhgHkxxGkiXbmEleErgG%2FbWfTGHvOkE5rFNiHDq2FBdvilw3fDmG5AtKRfALnHapHBNEgfHCRf3yOO8rXdLM2bBMoVAYU2Adk42hUFIVLpyX4KOKA%2F%2FX1qwgiwgl00JguvmgJchD2Xn3L6p%2B0Mim6VxgkrPzdbLvtZg2fFcJDtgc%2B0SLHcgep7AuGYn21199BbGhQdRdQnVuW76aR72qrMlDElPb4vJ5iB904wTcaovEeLLP8IyE9vSaDBaiU3knauHrMJhcjdvihxF%2BMZ8NF%2FmTnqzrbFyVZBXbsn5IiCW1bZd4flKinWjR0lXL0HTciGqFI%2BOQyCUhem2Cl6GQhcsKKIAezqwzusE3fiy6JOTFIamZW%2FaHU5v0zvW19LBQd8PTjfQDMgfYyT%2Bo9DA4YTwbTLPEtEdFpbovy9GiroCxStCepUYv1NOYUof3q8WUFlUrnPdOW%2FwO0ZdVIhE%2Bpsz1YVXXUGE4LqKfRoriDKaHNmB0VRqxdlKDj%2F1dMyMIVC67vKzsc8xmHj6hmNnwpw%2Fod6XuJzrFAZyiWOT1sZW6bLHfd%2BhzALjO%2BDaTHJdOWkZ1SmVVlfI3Hg1KsQiCc6RCUTodT6MDAzhlL%2FNzWyv%2F0qB8tftOWTKd70fsyB6PVyKRBzp3IT5JNx7s4H0SiTmYawzm7en%2FAHOr6bSVl1j1IECHwizcKTlw6tUZTO%2BWiarQfMK0Wz925uqr8RxJX2LZzQZulQnTTA1Q4A5H9UpSxSrGChmN%2FVImfm%2FxXSfhPEE5VBwvh%2FtU5lJe%2ByT7XxuQA4yAqh3g9Q7t4xrZieXf4YLNYmyo7EBx1yBhykXWSC4%2FsjBojnz6g79kthOKwHr4%2FsxOtH6IjxsF6nEP5pXzvPy6t0%2Bo3yYrFfzCwLGKq0zT%2B9&__VIEWSTATE10=cACp4vyK9Zhj%2BPSNczpdMZLzFP4jnvaFoCusUHZmqv7pULQgVR0BDRQxOm50S5uNCN3BylOQWhimhqsF8vfBCvIr8hFIrIAHDgST2Nih5N%2F%2FUd90bVBfxtd7oqhLC%2BJPwzItUvgoQUO%2F40rhYL57LKfTPp3lnbjRBYqbocvIp0yvTb9bPZmfxs0LIpXoZaSRrd%2B6calJuJpaZtk3TTGQwDR99XE4%2FVqTKKDnd0Qwn554wORKenl4ABwi9oXMsxr67FoCJ9lwclXcrB%2BSHy8um9qTYvy4gWkga31c0GO%2B%2B7FCNeIAlYLTNni7NYERsWCfhlMpBL5HEWYJdJfK0HXFUl5zb5Uue56i5grDGmFQDR9ksWkk%2FGEleRDgpK8c8ujPkFx7wy4aawIieIPyIUHNx95atnMBB%2FBWwYV7axfk7YzZyyD%2FY8bGZpnr7b%2BfYIh3Am%2BcAdCZTMJQO%2FrlUdcZFZeySgU2QfYA7LVglS2RaFrDOWJyekZrBxZ6Y%2B7HTqHLp2hugxShoYfm9hPHhsE7MJAbib1WlD9Npg55VUS2hTCocgLUtnOyEXWm5Kswsr%2BSKGTtu%2BsPJPzLkIzftJs6uIH9Mnue7i6ijKUspJ6jVN%2BfuB5De%2FmHRXNNVH4GZjFj2VyQ7XDejyfr2%2Fb8Ny%2FS%2B1edHUahij1bo891ToFQ0uffhf%2BsjA3eLj1fcvvEYGYNadK08A6QG7fokPqOQwZ45tU0pLdhEJKcw5y0tb7m2UNjeSJ872vIraXp%2BW%2BcUuLsjDFMsq2Un%2FX1oLJoo8QMhIG3SVJWoohX4hFYQ8ls%2Fq%2BxLkf10ZFtpb1qJ0y4b06DUZ0l3woeJE%2FisUt36PnO9QnxaNUgr30GSLBVwFo2h0hLJFXkue%2BzmqGz6e4beXwmZb8YZIE58BgxwElF73s1rw72skZ0VCb93uKJYc4IK%2FDvbdKy%2BASi6CSsMrjPFSRi7ELjeJbFq3FOLLArqW4zxfOHeHPohz8%2FskEKDjQ1dh2plQdIZWDBzcXKxbbfRixD&__VIEWSTATE11=RHmi8JIc9HXw0nWKHSLQlsNmoX5qILKJk6Dt2XW06Saf5Dhj4JiXmwpJHTo15VSPcoQVmsQ7iMw8U%2BZ2p95qIToEjoCH%2B7tTmLu23fXRE69sh69EPwfaF4qJH7U9SQRrb4Wk4Yl0ygCO9RLaas6JpozLEQJDtQ2vtydlarhveJbgU9K7M8Rd374Gm7Is7n0oeFZvieoUwYQ7EI6csb8NWQR6mIVmUb1hrXuT9%2FDh00qN0F7tFc5cs3az9UdPXjWPgGt2P06lp8%2BMf1LhxYue%2BmeFtDr2cH6MBiTf2lmX7h%2Fsd6a8Vwd9EjOGXIWyGj3lA775nNURO3SINdfwpuJ9WfqMFKVEO3v4iihkmnqJ%2Bz5KsuNTfrpE7g0jwVgjlj6%2FYYnSObMfv7YlBsQPpVO2rQGgE5cxW%2FgCajCsiiw5y5wxZCwsJzuDmq7heHNXnausTuE3ALs79j5QDyxpe95lcErDtdJ0so7ZjNn5S2ZRDRCKW5P9KeHEABfs%2F6OVA5QUI5j8BR0bVwa8qMb3PTxnC1i42ADelwlM1%2B10rxOyAhC7%2BrA3wLGk7TUzHCpfd7clitynFo3q9Ovv%2FSYRJKhZB60fdw%2BXxV8hXpWRBK66WRdPGR4IBTxTxXX9n7nY8uF%2BqS2tQtwRgS8krIOEBi%2FnYjopf0hJ46ygZyU7lFphB5%2BWlM%2BlIxmjyK2dRpRHnh%2FpoIiDidO%2BzycWpZotVIIFg%2F4qtgF5p9x6rIg9SmDmwnS7sGJgASjs7THIWLYG8poZuxLWAzy31aRWU8gbVzVm%2BVAvBYKE4YPj8F9xRgxMCAhcO4C2HpMUJs8y2OVSZf%2Bl5d%2F4JSFjJXFi2yAbN1kzdmS3T%2B6yyTXqm7xeXhsU%2FHrIo%2FcGNvAOaq23v4m3eUNRhSuV0mesgA1hkByEN7P5oPzkiCSt9ojPLxHdeN620BAqSOK9YDwvn%2FV76bVQu3M97G91JAWtcE7yk8MlBjL2lgzGUQh%2FenYZtwWs23G1AxYHJpSiviI8fCWFArdG71Uf&__VIEWSTATE12=5lLi8ZlviXFI5qQVlVVl9EamVQJZHFK3KTELMoY%2B%2FJ9H3y%2BJhCOgZGX9%2BosYg2WkAGuV%2FJ9Oz3v10TZZdg1TBoFk%2BAQ8coj8%2F93fcv%2FC5HJfSHNgWUnc2wEIgbkzAVRAF%2FDRo29DmdFLheRn4Rw02csCQRgzmjo%2BrcX0%2BrJAbW0u0Q3WrPvfGC5%2FUZ%2Fj5wWtjjikrDbS7AwjCYcpu7YHfyZ%2FqPinFM%2F9ERRsdvRtjini9moqAlOB5Rduvj58e9Kyljy9qRmupI11hVFcxOJJ%2FXVUj0hEs1rzQlEqMkN3UQYQj0gYsp0oWp10smCDtiMwfQmJ6g6zMI11P1fX9aT7bob1TDcnJ%2FSZIYbTr%2BUBzMpmfEf1WEcInOz1Cmnetgx1I6G6AaNIxtpvC2LXPZY9URn%2F4yh2m24rAhiEN5incLR7nf6WiFLeVB7W4cmzU5Mmb1aQjlNNUdEonz8OsLxlqGxGw2pui96V6SK2cz5T0qBq%2FfnIu0kWY2FrE1nYpkxX1TVRteau6FZ6L7HnfK%2F1Rlc%2B9TUp9eGzawrxu6f2JDKAGgJ4aWVtRmaTO1zXif9ypykN3KSD68kwWlh95amRaQYWClVBIUOcDG%2FylsTFzoN%2F2CY%2F8pGnwP4tRtUfwM4PLsM9QkMQssrgYl00XaFoX8jlfQFvouKnetBMvUkKePzcerzXGorOwaBG42TsstKoaorYymPJ%2FiE41tUt5VovFD%2BMWX91OMPmEukJF2qh6k27p3dUGNPSLe01FvFm%2Fxg0C9dfrWhj%2BgBhYKUf4Y8odGc5Xq7Xm7siXjOEReWO0omPyn0ntE%2FyOqpWgHewTn8Hwlsa4h4LEtEpE3oSzns44QC9wqJ%2Fp1Yhpd4Cuys3XciIhS7EQhOz63xVTSO5KW7pZySJKoEyEX%2FEej254EDdMdOS%2BEf1P7sU0aEirnM84aaAPU1h%2Ftou9uL09%2F8xZFU2KRcExFxzLsoOPd5h2VD02283AjcZn5NBYA3TvkpMqZc9Kr0sk1mYi2csrqA22wXZ&__VIEWSTATE13=ArZ5Bulm%2BcrMu7hpcdGhnHjKdoCcpbwc1IwKLryHs6M9rxGmVVpp9GBm5yQSZg2zK0KOJwFabI7rB6w7tiYQvckJZ1f8SezY%2BMTJk%2FhGSFOAuXuzlU2qWR8ktqBuW%2BHtPOdwyiTYk2CHesiWZYgx1PjqQCGZVPV4ujYc16NX7csmR6q0U8NxG%2FxZcBVOQBSJgoVg9E2iwX2EO8e3thLJEmZKT6I8oXWvftTn5QS9r0n0G8Mr4Dn6yVpFrxDTyAmQdCX%2F%2FcCUeNXHiVpFzAB0qyffN%2BMRF%2BJXzTEjENxrs2ebnglspFGycNL7DBWVn9YfqSDbKRj7N%2BFhA5DfGc%2FrLeRPJcRDcHKkqnVz7DJXvMn8maw3kOoaQU9n9ewp2eqiGENEsVZK62iYPVuzcP9RtE1ok8SNOmXjnsbDdC9%2FYHLZQowrSP%2FCwzNSP0gJoI9E4c%2FZ77cFL23V2sKVo0t3zwtqs4PW%2Fy2Dt8T%2BQXiLDoIJ6tbXm7qNunof7mEu9U82AKYDx8dr8CKy%2Fmo%2FdvMuua2Y%2BVeKYIiCHmHbLBbm71yRL9C2%2FzArW91b%2BThMWdaG50bfWWIJ7RWkOuwu5dcW044sBey%2BnwvjHCiHT9FiR6A8tzBjL2CJMquOQaJrY6oxvQWk%2BHSAw3ZoU1hObBue0k8KP4YvGu3btbVWqHrCeDMQtbAQ195eOZWaTR6CKbknpBaf34MlOBoAz7Z%2B4S86qiqXgYLghd7Zam8MtdarXpY8sh98uwGrUXrIhTDt5A5YyZcxs3NjXh82I32%2B9cYh2BO%2BkKACtD%2B0n%2F09%2FKi9cA%2Fz4EE6opWtGNhii0VoJEV49tEbWmGq%2FhKcdq77nQBSZwqRM4ZUhzcI6AsH%2B3OXLjuraeb05s8C8toT07jHgv1rd9nsGZbIH%2BmtXKY3c32FiRv3Rs8mKIxoqjc%2BkT7N9Ab2xFY1spG0g3BelhzmNNXUMncpw5fsu8Q4KoK7v2v0SN6kodO8me7l1fjwwZ%2F1ThU2BrkAuIazZAXv5q2uaW%2BK&__VIEWSTATE14=p6ChB4wrqlVahWOUUsvOgq%2FF8EeACVyw69aV1oUZAGmd%2Bb0m4%2FHHjkhEE8vQ3MIs9Hwc6k%2Blg3dyvJmQ8PW%2FtswOWDRrr%2BbSVXZlTyG6p7Jj7DpN1WJm2S0%2FlKGuqFGzAcDRWgfii%2BbJ%2FYlklMdEdkTzqRtGEWNz3ZydtZuWqmjF12mMa2dTyUyaQXMV0FBXH1AzONFpYkbkKoxIMqnUJ60totwnpnBmziQXLZJyoXO181IU1hhJ%2BtF5LEBFw1dOlz4HxEeFgGP3MNbcpCPZF5QAFLHnuGEKssDn4EpLBtvqmP9gUJdFPMZl5LArWWLyj0SV%2BcufDeCt7tS%2FSLRRZRmvQlXn9KTDlBd%2BiYz4au%2BNedSnbh887%2B%2FNQf8utfm9VMTDBmNx60BMPPO1oLOiaNn0zoJrhkLulrB3r%2B15j0ULQnAbkLcCOzHygPRvauMDYDOl67fF9wWrgAqHlI6fvCmxn0EUZwwl3EY8SNxJ0h5nhRufdGGRLWw%2BcwBx%2B8lvMtlYWY1rJ0%2Bqg%2FyXI1z5oU8cnQ3bmmlO5oV1VtoIvSSZh1naVLv5E93YCbk2Pk1EWH3QNzz7ThfgYp2YAF68EPvkB9TqJ5e5AdJIP6vEVjzmB9NSVXWTV4yOVJpwcR5awF7TU4jJj%2BpK%2FAJSkKx7usfbEpm3MdOZwdyRziDPzKsS%2Bft6qP8EencMDLxQ20BsclfY581yPLGSQfg6pnjVppXOXiwa56O9mLTkK16ud94wNZOUOmvGC3W9jYMcRW0dZiRsXOP5kouZitO1XGO09YoAD%2BV5VF39KNaSQx93G8zLCqPpasddErC%2BtRBhwtTNRqrHNT7SK%2BYFmpoupLdk8IRNMetLE51LGcObh03Ffur3nBfUlqHLKrD6MVGy6Ah%2Faflz4ZP%2FfYVIxqDJ7vAuTcZJpKjySKMUpMJwS4K7vIWfnLOg8q5h0RH3PiKXQfK0OGnFVmeoyflX6FBtem3ZxvsgK%2FigbjqvJj8fwIL42DmEDBujVInkvGf%2B%2FC9Exsrc&__VIEWSTATE15=2a9%2FJwbSO4gtBbz9Vs5vi0Ls%2Fy8ktuMw58sTeXPrFoZBZ6MTfx%2B4xAdwDgu7YqXEtMl51gdjiFNHpmzmgzvF1ofY8B%2BBGumbgCDGFsI5k7%2Bi5FUe6TJsSpI9BA6gDRlfFQnjPTbofrsTIovjUfdX9BXk%2Be6AxgG2wrwYSCDCEyc1kM023qikpZPBsuZZRgQOFI9FS8uqn3FoqsV4okyvt9B138OUZ06GQnSeXyqF3DfeNGO1rZYKwqDEcNYUWIz%2Bg0wugARLcIaDaCYTTIj65D6WCT3nt3h0lBTT%2FzQET63XMYQuUmiE9cDwlrHTZYOrYSFPrv6uPdx7d9fam4YM8a4qSXyqHHVoqDqzmNxgTsE0jtgm%2Bxs%2BSUAyNugoskXxwHxM%2BZgew3HuskQdhbaTIu0SDuPZcH1QOlAIupS0%2FUkwpZPXI%2F4tWDISp4ghfCNWY9zUWMIWbrly8B8Ua8P%2BJ2L3Gb%2FPsoplHe00%2FYjyHALqoqWc4AwnwCcCj1k9hOSdNz3I3QSxMjZNJZoEoP%2BbSYbvOqCGQpXIH7vVp88QLRZy4kTgWw%2B4ZhtePFvzwDaiWjD54b74jvavnRPNakb8HW6cViXzMjaX0YzMta6xt%2Fjed2HGz1vK5z%2FR9sLQ%2FHk4pkHGfkTmxzIy8OMaDh6mcDtufU66y7pjmHfpI3uOoSnOXLQbmnjPFN6fOOdPDfDxGQ2M9oBT04m%2ByIIGZK6m1BKpj8REZAtNVe1%2BhCvuUKN5%2FpZRYKGmazEiaVT2uXS%2FWXicnwhuoNuvc1eezaEKqzlimX2v2LSoQnArCMIxzP8gROzIS8ITzDn74jDYM6xrcL4L7tf%2FSR8J0epp86PPvhVq3CxOFgQ2gkw0qAG0g0jIsix6mRm2l7kYBp1L4rp793xsk04JrG8TFa5JzmuwvyA51G1NHDuAC7yt%2Bt9RCnpL4NKBZavXKWLxpVEaMjZi%2BOmiaWo6deJYaikVLycEZFnEhQ5TipQDOVgfmXkFedZD9tnrtIbWhZJZs92nMX1k&__VIEWSTATE16=WDNKscGf5iP8ENIO%2BUnoRLJuJlVabGQo5t%2F1n%2FhnnkH%2FgogLoxKS%2Blqaq9ioSjkSyU%2FO3zfeIpOQnhi083nVErey7cfOQaNYXpsvm6ImGHYewkCE8KDisbuA%2F0GH2A7DThisFpViSQo0X8iiZswwpf%2B3IMZPhXVLLy9qK2%2BPx5iFsOdSbBhcu4KKo1ASS7gpFd8VZSNGoWZixYMd5VhztNqZWgsaLIWt7qzpS2cTFLPLdHlyPvqgmMiw1b7QDNJJabANuVEIlC%2BJV%2FuDVVkgpr%2BcaI4Br5B2mJzFkAhYa0X7kPTQAdPJPeg0AGJaU4JBWoRw0ryW3tbYvnIWAM9Wg1SdgU1uQ6jp9L2OhX%2BVI%2FsBZVvpVbjbYPN2m%2BWP23wIXmqGUsFLao1AoDQ23dlW79W3mnS8v67quO2bstb0JB4%3D&__VIEWSTATEGENERATOR=7A42D60A&__VIEWSTATEENCRYPTED=&__PREVIOUSPAGE=SecPNvXiPLs8oHHOs1DFauCQF7SJMSO1ybeR6fpz6bzZYC55kV_xrZqw0cwRrGhbwHlcRumnBBpQo7Z-m3QC_HQ9JoDvRzMAj8oRZZuLLuNd4PwEDnFo-69aq-e3FVatE5DrGYIHBb9nxglElBd0UFJ19DrxHClYAaRt_vrDydA1&__EVENTVALIDATION=2LqZhtQ5J2h6Q4WLpPvPlPcHiEasmuixZvYtM62mSMYPAqFFQl2%2FF4bUWqAAHa%2BxXEZs8b648ggU%2Fvh7YbugpcC94rzI%2FpFM1vBKTu7ixkvOvUwPxI8kE8q6N%2Fe%2BvQ4hX7gfyxPFqGmN9YznfWSk8u5quf7pOHWLRSdns5Z3X7BzPfnUjDIBqz2bzDt7XplpcdhnqfZBU6RRGjvwpD%2BqaB3vZZQ4T3sCfgrFdXD7YBNjogID%2FZ65ZDWyl7j4bMCUZQbnKOg2gv00pl8Ov72KaAcuR%2BSwCB2kn8PsiJJCH3oFJSRtwmZt1G2YKLFS9P7IznHtnvZoO0FQbjfSazWUakwO%2BI2pdR6Qu4tGKrlVP%2F9bShFrZigowwMWcXYEB718%2F5N8mJqiOd5o%2BgJ9pCwkVhEX%2BkN487k7E3JDnu7V9nTjQ7C4TQkdk6bNSvv6nQJ6gdE61lUv0RAtVQR%2FQ3UKfKX8DQ1sjpx9qnk0K800ES3%2F22TVU0xRlrdPrj3l0WVWDtcimlo61c3HKV3i4yUj66P5h9izIRqsLEQ8qzDtT5TF%2Bh8CwYWgLFesnKQT9hgcGMGwGwc7satTcphfcZ4KfYftkMcRfgaYMqx8xzg%2FaM4EBC4yCjMuhPkVlPhcrOcSKGPtQgPiGHTG9Hpxo%2FuVlGAgmliEq9NNsqkkqsf28mWdOkiWcFBfzsbcfvocE6oL5aK2s3CP%2FoVtsZe%2F6buvBdrMf%2FnEa5sbNUfbJSkjogmOuTumPsQEWejklv4Eud0KyroXhgGFgrb%2Fsk15%2Fmx6FsPdCaCH4TSCoghxGES6PA204a1mDCbm8yVvIaF7X86IZ0Ri3ybUlYukR0OVMReiZrO1mGobrtL2Pr2xsQyrqns%2FKvOP5PJ8xEDkQf0uXacJU4H8Vik6yZ6JUKSUxMNt1GpzzxsUpUCZ814AqPXC2WIcmkqrHKpXX8lHGrJeowOY3aTUmMkCBAHQRG9eYouxXN0AKnaDV4zC49nW0idFsOpdIwpcECIVVtK9Ut6r6AM0HSBUOZ1aKjpTsh1hpTM9YpwNyvsjwQ0bbS8tRWDt%2BCKE66xGbLMW1zYnEXnbntqKbI7fBZX55wNet8E891wi4z%2FAJUgDOndN0HMwe1pCzVtH74ZY3PaCG4JTvnGj9%2BuhiEtXa3msUWNytWwgdyH1YLcnra28WtkqRw4DnJnBDDJjob%2FTKOaYwugDvJC7%2BFHV0iiTS6%2FLsHOLGw%2Fqxw9Uu5UsxX8vjyaaJKJlZmcBsyN5Pnrh6JPxqf9UYRTyFoKiNSS9ajVlBL2ch0wIXn3IYsz0WQHhW899VZKKIUy2OpprCHR7a93509gOtkxuNdXOjiZR%2FH2fPCGO6XPc0j3tZkpRfN9PUTakKvCCN6jvSgPk2oni3pDsCFr0OaO6pw9iI0S11CDPVu9BTQDTS8A%2Bulw9IALRXiRmaqfzGE3Yyrv%2F1upRW%2BCWzYZ%2FAGdx42xjUXe7m4TW9psoTzDaxHu9Tvos79q6P9SspDeECCPy4yZcfIXEBUD1m%2FD%2BVLZabvwOP0Q17QtowE5sBy3Fzi4vWS8xPnVv35deqt96dUB8n%2Fs9G0Tltu84nX1GYhET0pTfSAZ3jy%2Fy9q4RQ2Z9HxdEPZ9QY3pBV%2F%2B0dRCLx%2Fr85czyzW65AyytVlpVq3RReGZZvbh72PktFZ5YOCo4jAbjZ2GTo%2BXlcAsxMgBPnpaN8ncuYldvHn0jl3K3hq7T8uPhsSt7S8Mtgl6vhNZfS%2FPdV%2B7zRlv535CNj4ARrwQsbtNWa3JP%2B%2FunNTbbdYRTL1NwCl1JRlFCRXP1RsWXp96e1QTRbivJNQ6U%2Bj43SAk%2FIQ3fDezJOzof2vsN6i%2FbwAVbUHphTI9GEpduR%2FZFERw384FXpBMhLvOGwoYr5q6z6ql8r%2FvXwU1%2F0HvDOSQhg57cJgBnbOieac8w6vKKXoel8AAHVr3NXwqREAEDH3mSKHYufMHmvZQfv%2BdjC1W%2F7hTJfSlvAdqzbBD%2FlJIKCA5nI%2BDvcPchkrn25VeHTjsuGDVaPksZxHd62%2BVemPExiAycrlNNjOvWsHYUE9OGt8hlyqBEuvXVREr22EC%2FLLYLnihKqdBlDWWIxTDGPmc%2BGsGFjq6TySW63L71OnerdiuxNbfxJjY90vKsjhTkIMfy8gfIsuYjcYFu7%2BTMQHq0RBRdCP8icKulqyxEAYfC8rqkeVbmTYu3VVH%2BUtckrBeEnS6oicYHHTnIs%2FPS2Nrdw8zdWsTRTKrq356TVetgsHeLttD%2FCU9i%2FjBPD9TTZ%2FOY%2BX8HOaUujdEjgcaO%2Fq%2BfA2mWMD%2F9thlhtiSE%2Fbu8bUQq9pmyhbnZfnuA%2FAN5Y5%2FZMhU2Ub7LcwMuqjeOs46lYqq3hNyoQu%2Fvz%2Fv4ZthNcKbJDLuznw0hyImSCsyEYJRlLC2HD0betMDqivzqBQfxxxGOSl4rBbbnGVoKhUOCAPPGHzHkfl3h35J0Dc9ZoUEAjlRwtM3d5XtBYZTmYkHnnZ9QcBo9Xecd%2FNooTkFayooxvSht%2B2GIraO%2FWUzvoWMpOa7U3FYKNt2KhD2lPhsENHcgqtJ7%2FRlWv0nVVHoULFZ68J6Gai2WN7nK4wrxM0JD5aTDAXS5HYh7GWe%2F8mYwhq0QHztvKPuf7nKQgjbshi%2BGNB0u1JbNka%2Fi8g2OWe4UsSjN5FwhzzbcT%2Bpj5xAx663WgShS52D0FqpwdudZUAOxP2%2Bbtbt6dSA%2FTs%2FsKFMgDm8aI2QfyF6nLVnsEoacLclbpnWx8JUueatmCRj9Dt%2B7qvUVcLzoWk46CUfHocxTP6YU6cF%2FkFI%2FwgNGXS6GZKVjUdUdIHlOd%2B0b0uUmi5VVtPQq9P7maMN8chNKtF0mlY0MMiiEGskek59fNv2mwqYSe68Z8si5552FrLePcUNh95BC1BtIbSpnUXrFj%2BhtEdBC%2BxWQuMyZrE183%2B2luvFM4KvlEN%2BuoUK8jVkWcUtNO9RKuscm%2F6GWM3gr0KuAaFddwlm2%2F0yVfRXdnJIu443gbV%2BzMD7A7aKbogHL7EywT6S2LaWms%2F6%2F%2BVtcTG%2BxbfbTRD%2BJku6WxCuuQRlRiURnDgXfPV6GUssfkaS0cd0joaggSH5b9ql2EeEQiPnq4V%2FK3tc0Uf0iPE6UiIC9cu532TlR9rRBFzKWMLwWCxW4hnnQuc4pBQoErifXUSmntBhnONcErdA%2B11qMVQ7m0lkpT6Po1MAlyT3gRAynuNucLdRGN9yyOHN9MlUr3ViyGiy8atdUso4IpRfFVW8KbpYsea0eS8MGQxAG2hH0oVZfuT0K9Cjts9v4ZkyHPXHEemUaR%2FlMoV1WlbolnZQvVBERrnoqn0GjTJRQ8rvdSnCbt09hGpyjHL%2B2L%2BIeKJQUqiu1AbhWBX6w7ahHq4x8Ic6t4CrnyMYSy%2Bdz8iJD77GwznLstSKxcx%2BBgQm8hHFiIK8xO7CZGmEc%2BpB4Da%2BgtWHodgF%2FXSWNySKRGJHdW5GtoKVhrcP6AsC7gSigk9axkJo0rTPhcmvUx7k1AAy15xBMOEwGxSH3pH3Yh918rYCBfEK7C1Pw0FBqiltHnqUUsYAIoqt7gSUdhSTmZMwWZskD%2FNLks4RdlU3zbm1hq%2Fx5k%2F19ecmGNIpIwqsKuiAqec7V11Kqx8SOPQK6uQfYdK4HNsQeHXnTAFvtqQzEdQFRnkZCYmcZdFYgdUtcslD9mDopISFj2LX53HmJ34YE3AftpeU6Gvl%2FSJBqbR5tn%2FNwz6UoeU9S9ETX8XIwBdk8r2fyrqDQlrNiMqVBI1gMy0%2FaIrO0BBB8RXbCpZSUePiEdLkBUYskgGykB0b3d54N7p78sabkCBVRwJbn%2BZGuEKzSo6LK%2FlonWqJeOL2sPpGedtUiDOtGjMGFyKGUHo%2BigJgv35Qs3NcXuHKymZt%2BwOsXRKkwkHQhLuS4DNreZcKH36f84mOaVqosJDExeT6%2BS64VMRws4h1UGHdi4uMVYgAhgTMEbv6Q4almGnwcXH46%2F%2F74owLSVS3bQTpfxT86EszAyH6tjPTRixJqhIuqdWrAdZgI9HQGcSddoOUdVoz6BV29KBloFYKMLnG0EWnTn8dBD6%2Bwfm%2Bnwe3wSQzPTJnGV1F5YLDiF48kNM5BPWXMqd2Oa4ySosTZ18Os1EbKVozQMiogtjCD%2B8jLSCVMzgVhDVNBLCawASVgVma0mMtdPAfzzWa38v1qwFwvoa6FAlxUZ%2BmVF%2B3fHX06VrRqOAqqJqnIbkXR61YWQzGFf911TDFSu%2FKjteRnQ2aYx3z1%2Flozahd%2BBy7ZH84NZjb1iGwTefUbe298P4eGnwofBR7jfO9MawV1%2BbVBVXdQ69yu37OmGBafxnzvlGxl4EaVDNDmor1%2FYTfgV5ZV52vSBObEI5aI2jom1r8gtr%2BuzTjz4HcCqAsK0GQrHbAwIGfEbGJ23nm8NL1JfrJfndeT3YlJeiuK5ZFGBwLxmfvuif%2B6sYtaD149YwiE0A8vrps6LwuBgDl8iYFzOuZoUY2TwDQSKIbXwqj9g93OV69XJt%2FdhzCptRwe%2F08CaBFbO7ziKLQLb%2BpRm%2FIAXRXCsUl6PGeiWBarPAXkFNLBcA4dTdlcbqQMFWCkXTiSweRu6hiiswGbmMbk0hxL3CIODfDCI%2BYc%2BVE16yQRXWWL2HKUQUDDZ%2BYu28ll5MkC1q9j2uiKfdZ%2B2DHdBMm8WKnShWjnLhDStMARfIE06K5HJoumP%2FzHmSU3TXiAW%2BrEPQ2fGWLR5SHtL1KD8imf5jFX4PBNCLZb%2Bovc3KYgyANXH9D5FLQVu0G8Bw3ObZpOZeROaqp6dCCmhucJ2vKVddOdZK6y5NVfk47hG3xDhSUNrp%2BpDmU0bqEW%2BkDfqCNh7%2BhecdW%2B%2FLYO%2Fy%2B8REQrx2cQyAgCUqApdfVgMr0Te%2FCYGbz4aZ0MMPHYhf030yX9mN9L0%2F%2BBX1J3aCJkaCVijCGTuE7iJeyiev%2BV4wbsqoHdgwPkConeaM5Lm6RpX71EVGcW6Q0W9Dq46fiT7PW%2FMzOeaI1V6T%2BcacdFeXsaoMSH4YurJAGb70SseXpiyfkQWGS4vcyH2XcNQ%2FNZG7SmcCYgnMgi3tro7qfOX1B2oZH7SsPu9XJbapXUeMuIzbGkCYa75MRpq5DyPPyE2PMsZN4wweh4M5KS%2BlSsbX6gvoeUOpmuppWuOI%2ByM6S%2F5Z4Rxx9rpWe7amZAKtAQwG3cFWLJZPFyo4Laclk5mn9g8r9NWqEB9sUqhcVmzeCwqxCmH3Vzkh7WSf7sg5bn9Hvg2bcbQPrz4Yd%2BzNtBt7H%2F7y1GKhgTa%2FUehOwrNWyFyfsr5QjzFoqfU83dAPUeUneaKzLSYTWW49tIWmUZPwj6aAzCBjVedqTFsx6gg%2FjuvNz2o7myrnHu3CHP7CpmRo%2B18fOX579AjIq3W%2F0Mh7eOMIxoaezAMCSNBUZG91%2B%2Brx14E52ELjeCs3ObN3FVuXF36nvTFRtB1BBc8lqFXE%2FlvdL4kxIldQnV2ZDgHeeRbbIh%2BlwwYsZpIKN98l9BqOir0BVHaQ9O5mqfK1EMMv8dqBg3fWWVEvzBIs8VKXGuGf%2FVkDEOEqk4dM9GCE7fs8y4u%2FUpaO390EMAAyJaRJGjeteO0f52v9nc0uwFfiOYjC1dD8uSpTGQZP5D4lujwpCs17clDGfyqin0fiR2NVvV%2F4DnlcE4eDeCFYsFLWrdbenp6HMRNLJZZLlvqO3VLGzfrutOk9JLBxiBKfwdbka3cBMNNC8x59YbQpE13ULSYTjDrOkLSrlF343H11VOoqyyNhlRJyELR2OWX8Osw9zGoTye7Gl1TizjrRbWEASOGFfISM6YVDOdxP2vet1HKyVEec2E8AF2A8XUVu19pS5KWCj6coCjtgK06NAGgbEaIdzIQnAwxkcRfMYLfNM7zWLvjMrPFvt1NwAgi9yjVabIczM9lqcWLwkIbGeUl2dMe6bjYEgFYiTzbKESRdU%2BxHiXwLOfn6oglw9rDy9j15IHnAHK%2F%2FVnYgzr36lK1vXk7YEEoQzijSc3uffR1kbusD9twQMRXJfGz9o9Iy54OdY7jxFszxELTIjtjzGg%2FbPeVZuIbZHSbEMpi2JQ9MU6bic9bkBqom2%2Bg46RIQY4ZEUCbgF%2Fy0l2AQxGeUU0JIVijkudCvUDvlrW7y2yL3niyKUHI54Nf6jDeylv%2FiEH%2BwPiPF8qU5hK3ym59nDk%2FEnaMlxWY21sonCfi3L3Dma6pWlX%2B83%2FsPhDWoBuVQxErpoZ8qOnk1ycEeRwv%2Fz5m6ThkXT785ssbbxSy%2BJD%2FtIEQzNaBu0aeJy%2FX6vNG4%2B%2BgcE%2FQ0bD5hRwndo%2FPPLHGN8EU0b4pV7pqP2bSbzvemrcJFIJTgJ0c9q%2BZ%2BFqAsith3VMLAycmqphijta6ySrAfDmmlzyiIuDcb38GKPcz2%2FhNSoIfoFzThp%2FkbSx31ZL6pOiDd6kI%2BcKQeM9yPZe%2FSrIWQltN92CgIZDOA3WZiBxwZDU3mYUVi8FobVv3O7aGjL3aS1wCJBsw82%2B7Pp65COIFoB3iD9BL5e8zNiHmOucfD0Ifksay3dTQ835p7PSUkQ3Ur9MyhcGu7wKOeqZ39qp4I5wA5U2skpA63fZs44yj%2BZbVM5K7SQJo%2By6ycFfrTbvT5CB9GhfboQFuZrW7jEwfeYxSMHYVsaJQur0LVSYMqdmFUy1%2B68QsFUWrEouDsxHHICKCCwRjUiQSWch4aKviI2iejpqvLjuv2vg7cSWH2psxaVD8V7jK2hvPPI5gHDINRcM%2BpGg7pSkU6k5rn%2FtzKihIaAFQmGKdTofRFVv1BSv8UNFfRj3uUl9ctED7olbEcDSIhTSCT39b4rHXwIi3%2BS%2FLy77mkLv1nlkq%2ButAMPa5c%2FLVvvvsnjF6gyqDK2Jee%2Bq1vhRC5rjVxy2MPdrlLwjMdDUIedj76qfLI7OytY19hL%2BZmbqyghdv8vjyIdmtKA4uMVx2vlF0s1lTB12qQMwnB0oT1ly%2FrMJX2SBb7YKFEd2YtkMt1EMUUNiy%2Fe83O0OIj2R6Do2vJltvTXeYeoYIxyaowq7Im637uE0PDeq%2BX4hJCwbDihcYJ2r6HrNWiyhrnz9cZbIcdORlYzjDWJ9vZg%2B6nPtlqueXk2NFHKl5oWTPoC6agpG0zKIDdgKcUfGS%2F9fPD2Fv27OL9yJGJcOyxDM0UcNFuL2cTlqRopfWLf9KtdKSZ2i75fs0i6s1SE7IGS3FUnLsS76SphZf8VQfsp2ahSLBodG9%2B%2BuKa5ruF75vtLt3jjOkkJxpN9U0N%2FSdS0FWXPHU%2Bt8ZyFEz5QJJYLvW9Nmqqrfny3IiEe8%2BCev0YT1q70yEYfywFgjjXsJ1d3ULvsVs1G4gaRyXDxaBffwSoBDHbaYwSsujeg3l0eUnfq2ZThraY5AcSE383exYXzwi1ZWV3Cs03qRubAlldBes8jJgAsSJrjwV8JdX3WYYIWn7XDRlIvK%2F42TcHBxoHJGp9U0jToRCuL47MBjlm5f6aSCT%2FIR74NUfj%2Bcpei5PFVuhYs6YEVz5mGDhbQ7UQEyxKzeN%2FoEIOjUrMnLkSmgcWCP%2FCGYP14YX0Edcnj7jp5sCePBNa1LA4h2ewkWPOmHwJOhce1J2TTkxLekpAgh01qgrd10qPhW2kzXtXZo%2BFW%2FuoQ2HAC60QkzVIJNdupKM9lhHMutdGiykdpDwHyNhTnuOoR%2BPN0Fj%2FMvI7s2LJUuXVaGVCJhbqOWqPl54etwZx2MH%2BdYkebdU5aqP0d7bTiFvmyJav8cwiJLHCIThM8h0XVzCdGxVHkRjxM5kV52cBynDfOPLOrC3L2%2FhefC%2FzsjS1Dy8L3N%2FF%2B6uVkiFUqh%2FI8MR0WBlNL9ljNuul4wBAUti7HAtkNj49TQOAkN7BlSetfsGG1she9OWZkctDqm4nwPuX%2B93PNRZQogWZ%2Bckt%2BPcz%2F1zeTRKtwdn2Vld0kJh5G6blLzskBSei%2BPdRUNQCXrQ6KnpdTLeMOMhuTgy%2BPg%2FgSko1WxkZgKXfpXt%2F1%2FplebjJuSbSfppyd1AxK8tGopptOdTICVAEzaZBwIejB3HqPB7Val9yRiVhhcWk5RmT5xrCajrMfk%2FOmzWsHpudstqYOKv1yuexfUznPcWBerVPTeKa0pSXbFnwpLY71j75vDTHSxTRnzBMlGRfKiI%2B7B8N3k3znNis7B0l6LvHAMPOSoPRvkqzuX1QucsWowN7lWuiDyho2s%2FqQ06K3DLjItErfrpx%2F0EmHTcWFU5FnRqgOxORfvq6tzERHBvbeVcPr%2FTjuHGrsvsy0Apec%2Bd1DToW5gQ4WMmAy7oa2ecjpR4XtXxbXuHWHK2JAlKlXQ3%2FQDZ2C5xLUf3zjExoDcGfMJQOsKY8o%2FgHwKwfbxwmQDvWig2%2Fs8KAPWVrcwRuwQXWtpOByAL0fIlM66mopkbFmiuFzbZPIq%2BYdUZ0bRCXVTKbo5oR28kg4eocqYaSQMLjiLi05NKTopQcaNZQtn5LFzpoVdmGFQ0L8%2BgoYgaHK68zR0zYunRc%2Bkusrw%2BikW2Eqlbl0o98llksMpi690AQg8XLnTs6lppOy2wUFjc1YgHNzEU9QZFzK0JytOfQP%2BA8AelZkImpW4pxOA0fvFDElfpJKCATIHOMRD%2B0hMWUL5cQqil%2B6wudOz3EEbMF%2FooB9Mj%2FnjiRBODOI%2B5Q%2BRITwPgSVKSU8nrV30gU4lnQAxRUAEv%2Ft1Q2%2BA31iSGjYxs8Z%2FRCwh5sXrh%2F9CCObMZTyG%2FeoKNauNS8pkK1enBjleZfZLEma1cJUuB3EOLx4TgW3u2SyGqCAlE9teDUsfhBKMixl9hNIOo98JUKoaBzCGFtzqdbBBsEjVvCgIUWcHAtF1pJb0ASyNeCMo4xjebrPKeD56A9S5OLqnbNgyN4ZvwEFHZsEUr%2FKqioz6Mp%2Fl5DV8VlMt1gh65zez%2BOZ8MNw0xfyn0vclT16DtYF5D8JEuWgfhF1I5%2FJXlzY3EGRu5ZLEcgL3WhCB0EWk8qhH5ykfXG%2BEzKctXsozL4LGcBMSNlLCdgM2sN1uQ1mjf%2Frw3d82JAYMdtiCcOpaooGZTOBXS3uos3Ko1mCaIDnu81AgUzzXt6YhXUFjiF%2B99v1uL4eq1h5KHsOq3AXiNcETcVBeTvl28VU9EsTlnSe3PJ1GRlRTvEuhZ05ibnLDGAsM2guix6O3wLZafIoLgopKgkWezXn4DJzOIpRbi0%2BNRoozw2LkCtrk%2FtYYNzZ3BHa%2BL85Yt%2BSxAA6lEIPoYY7zIMPVQSs0%2FI7v2kOQLJjHd9aZBLjCPJKX%2F%2FJq5nnHPvBYnU80ZtqVosJWJ6umb7%2Bnz9v5igphM1HYoBOCYe4%2FJir%2BEG88fLmaTAVJ00MIcf9xywAOT%2BfiU3A9ZB6JvwnaEkly44iPQSZ2TRCseRZwLPS9GGQh9CkH%2BpPLtrOtAMv5H6vL%2FKxy0zZgMAvcc8wKzhnMei8RfOVfN4Hbw91MockYSumYLbXoAQLYvj597BjjIfT3ysEBP%2FWYSMRPrOt7yjcNjAdctUh2hsZ42bFPeepdzjZO41eCcSiAf10MtqKOevQTCc6RnYKxSztxNjmv8isMfc5n6V8O8F8Tj1vLgZclQCms1B9Fz9TKfDI9KfxlLF14ByKftMPJmN10SLj29%2FQFT3jF9VZGo6FBu11XZRA%2F%2BOxjUxozSUDGM5eh60rDKID6dfduo5prH%2B4NkYC2NRt9GmIXoHs6QB90%2BLaU3DyQ1Kd0NYlVCwQ1eQPz01HL2nTREG6PN96IdXdpSoRqsUVByjWbuRnxrdRG7ANjEJqcqyK23ybCP%2BtGnmp63tYORB%2BcmMmOEcB6LVGk%2FONye3zjoR2lcRdzhQP4EUw995kJNIWwiE2PFDWBAEY%2Fm2aysOmmpNyXMaagQDcS81KbHTcvn5HtAgYiJmduI6OrG9Miq1vQcY4QtCacXt3QNrfvXv3mja%2FKnhX3pBpZHKtfAT60vKxnbGVcYOkZpDnEL%2FmqXcxKZj21tjIy3YSTaP1MZUhhEOKb16%2FuW3AhV5Dk4ToC2IUHSXuiplZRWUNQLvP61rlM8jPM%2BsHq0fesiJwCAkCRV2xtm7fDHVPhQhTF81wHsm9sKJMUkSa9XSrpm4O9ALvHQrd3m%2FUq1h5sok8g44yOQPi57lLiPMXuW6Yd2yBfG0Vz0lXrdWvebjTHNj8pW5AS21d2zEi3lxnAB6LO%2FdZtCcxZQMgnMCQL0Cbpg14sYft3%2BrHenrW79ODYeKbq6AXmceqrTpLTYCqjlOyaV39GOj%2FPc8IuJWaC5hT96RmpJ4CHCnC%2B6oyMWqHrYguCHp%2FEAdLkYp4yyBpbpQeauVUO9b3ynczUARIkAeLBNJClY%2FbLVV1KAI1XWeWgzWsxpjYUeaSzazwPeTNKS4F%2FIzKt3SiuGM1KixQgLCcS%2BPr70uNBHtK3Seqy75JVJdPjN%2FfJGO%2FtJ3LCejM%2ByywL5ncyG3k85qdORsTTaMx9IJxua1%2F1bFDtjwaIjwDH%2Fvzsj6Gl1LF5VhW7Cw%2Fj8AS8%2BX%2FfRLD2NZoiokhfT7kNNx4WgLt%2BfLxvJCyLxo6UWUZqzjdgp6YJ8ARyT3ft5gOicMDy4F3IfxeN%2BmM54Sk0cdQeCvlvUNvIvzHQE1fC0ZiE%2BYEMyRFEB9bl7sLdsJmPErgY2WXi44bR0LW91RE%2BnclUv11lgq0I7YR0PlIubItIJR6e8Ui9PkCzfco0K%2FGsuRN67waf%2FxhmlISP0yI0DoVYYRMK%2FTAluieWQPJfcISGTNvYgIBdcYniWC5ypxW%2F7FXLmaYnusyCeuhlDNK2zF63ho9%2F13Jpsonqvz0zIuxOeKQX3dvSMAQmBMapJAXS7RVIxmSsrNce2SvLaZ8%2FTvBCtkaUMRZ2wKt1F3hMReAk4Yk6YHlfASVrGrZDayJN9LWKXI9bgEnQe%2Fy0TPQoYPC7y1QSPGWI%2BIdBIgs%2F63UsvaxEOTE%2B%2Bk03HTfbFMVZ7tGwDiDlP5kGNdduKEoh85mSntx8my32iyr8CbqZqAT3PhDGmhUop0iQJRZ%2B9eBlbpZclNcsdQLyFIST79G3wQdtGqEmuF37G7omb6%2Br4kBXVhnqHis5XLP%2FV%2BQqLd1gn7%2BPxiAqE1y3jHm9nfGUb0SK1o6rHFKYOij1vdQUbu9VkmeBP%2F5Jo9AzJ0P%2BHS8vzm4oo2alBmmboWZT2Y0ZdVymO28b64LoCmuDlH7Twy%2FjJOtuCZcK4cNsrDyLWlTLf3jeOfKYxac9dC%2BlL4wMCqVjHbQzgGZkxC3FTxhozsTxofKuNUGScVkpHWpb39vcxpgFTiJZwdNphaCyYI4DKH7PxVpr%2BEVnZtDC2CVXvchYJDWzl1GgwwrDavHCHvwH2ljOi28xVIbcEmB6En8pjMMXmbA3WxM1Q8OLY%2FW0xFzhjOf%2FHfOlSQavVuk9bMFT8CaIXowaIHdjSXyp8ahw%2FWlxF4Pyfue9p8W1LvwkTy2gbiGMeckfOFgymsjPEXUnz1bcY%2ByqNncrST3WVMAqt8ucJmjbeqkjiMI%2FbAqpp%2BMcwOCpbVRiGrC2660IEw1dkyW3naewfxC9Kux1fEmaK6MwvSj3OU%2FkOF7%2B%2BuWWPeXtU0%2BqXFl6sIaEeWD900jssPKEMU59ca2PpsUvgjUWxqKYDNHwIIZNVB5kF8SvaVEeTYLvmZfh2JAqwz5gpypQmSaNhCJfVKNe9QffURYTMXAsrHV6SdoCeHEZlv5A6gxPl0TW%2F1DWAdXDiebak1BpkBAgnM7q7lANp8tTIKdE%2BCqHL%2FYbdkj3vaBpe4y7CTL8de4ximnE1gEcyfMthtol8MnSSfgFDx%2BRjVN%2B6jOrmwAvcih84r1eMn2%2FdkcnrXXGpO6yihW77Y6yz0JBBrYQ%2BsQ2auIAbb53Dzoc6PEErrp4AQ%3D%3D&ctl00%24ctl00%24mainContent%24mainContent%24scDepartment=DPFR&ctl00%24ctl00%24mainContent%24mainContent%24scAgency={license_type}&ctl00%24ctl00%24mainContent%24mainContent%24scLastName={lastname}&ctl00%24ctl00%24mainContent%24mainContent%24scFirstName=&ctl00%24ctl00%24mainContent%24mainContent%24scLicenseNo=&ctl00%24ctl00%24mainContent%24mainContent%24iShowAdditionalOptions=false&ctl00%24ctl00%24mainContent%24mainContent%24iAdditionalOptionsSaved=false&ctl00%24ctl00%24mainContent%24mainContent%24376%7CLBI%7CNPID=&ctl00%24ctl00%24mainContent%24mainContent%24scProfessionCategory=&ctl00%24ctl00%24mainContent%24mainContent%24scCountry=&ctl00%24ctl00%24mainContent%24mainContent%24scCity=&ctl00%24ctl00%24mainContent%24mainContent%24scState=&ctl00%24ctl00%24mainContent%24mainContent%24scCounty=&ctl00%24ctl00%24mainContent%24mainContent%24scZip=&ctl00%24ctl00%24mainContent%24mainContent%24ctl83=ALL&ctl00%24ctl00%24mainContent%24mainContent%24btnSearch=Search'
        payload3 = '__EVENTTARGET=&__EVENTARGUMENT=&__gvgvLicensees__hidden=0%7C0%7C2q7AhiaVurtotNzIWguMgdq1qPmsRVDBHhpWii5fdOYH1k4UZ0R9So8xptmSRht%2FEJ1KQtOQjIgtKKopNGAhk3cDoBhXYzkmBX9hDZluBmEudK2sQWkkiq8J1nQHogwp%7C&__VIEWSTATEFIELDCOUNT=11&__VIEWSTATE=43XpLGUZ0h96NdKtdPyQVVadTcYb2TuAC6bhcKGC0ww7%2FqQI7h4ockBaFWqZoSFBqxmFc2g0V6vtWyDtLNEzs3fx6Am6J5gaff8SNkgCZi%2FlBfUumB0WX0hDaDMC70TpoTxYJeHw9CNdWPQUBwWiGTjIHHPTeyeBRxDfYmvkpsKCN2TDEIL%2Bevz788flVkolMbcuDqHT%2BzdtqzpufvJIs2pN%2BzNbeFZ7El1SpqYIjXcoakGRX%2B7gkuQJi9eEp8hjGEpiDHWqO7fp7QJ1xEVHQrbUtzGuluLXCpKpsDEWZiDnwuyeR6THC54GknEdCJyapDDf4HXnFlb%2FfwmKEI6CKrozZA3mi%2Fmml%2F3e2x6lvjIGTGmhyC7LX8ep9ZM6OstSCm4see7DBkVJ3JKslMZdFlbVPWaTpJE%2Fkbam3XEM7KZUQLeRo9WPktGGBcdCZjeUc2C%2F%2FXdpmLlasqgS7V5dEoxcbzs0d1EFiUhmm%2F278HyDKdRM3esJErFNq1NhqxAloQO9X74W4coRWUj%2F0ze5UA1RqS4HBsrrr4ZFuJBkrVSZ5EOU50Y706w%2BqcvnM6DW3xDLjT3%2FJCXiryvmeQDFd5oD4dKY6d5Ru6he0CvZLu0F%2FPk9j6sbNvIEyEnfjvsRlALMjHCoxbcWm5hkqpQaHYoHbWE1zCqtV00HYsDLymdcEm4rsqz8UfHyKJNoe6cMGeV%2BaFvMAZ%2ByV5%2FEa2nw5IOarVV9DBanWjf3sftOfnVojDP2g1k%2FX5vj20L%2Fm9FP5C4w9taF5HC9wrA47Zp4VZ1NO5yADEboz4YXy%2Fv3m8wGnqNetISG44b2dUR0EXl86HzT8H9nmVj%2FcyUGklWtRHyau64mV1dFSd5S8NaW3GwXmjaEFJgjDOiZatNzxI1vM9CHqmMytZhL9nNBn7JDJzfoz4zONxjd2BDUrjszDhid3MOqUI8l11B2swl92Q%2F1LCR4JeLVgpVC1bTOn%2FWmXMmgj7u2%2F4cqdKS0iJAFXy%2FYJSiR2HmEoPLmAGd7cqSQ&__VIEWSTATE1=lX2QyJ1RPLQRz2BUka%2FuDj0ZH%2Fbv4IHL%2Fs0tXNWTowjmffYoGm5w%2FJ4v4vlXWkHzgysaz6JVyCVOhIc2Kxb3HkV938WrDJBch97Q1loXgreAqYQur%2BkdOV9MvDgFF29dmeW8KY8BO1rEY2O%2B15bHA0DPE4JhyGDggvKL73uMruNUn9Cm5hKM%2FVHZL11MKq730yAOyhR6r73lRXjB0hkpx5XZkKXvP8nyBUW%2BrMLGb9Nt2aQteUHW%2F%2BsjVRCrVqxKS6cm5UF52mFvKk%2FhV95vu%2Bg7L1XYQRNlqaKQX86UkzT%2FfC6Nk1PC5UopDF%2B372MF2sui3JRJIvSK7VroB1GiCxGspvWvPO5MXSamD%2Bhhfw7DVHepKzYv3i8ZjcPnicvSO5Z6naEt32PMiVgNb%2F2VxyTIE5bypUoeh3oI6XhmAX2%2B4mgyVJl1KXqI%2FUBxj1FRDIDbCHjWQnjYLU57QUnw9dVO5AVgClkHY1ekoa5JWFisfZlvqrRf0UFMG7ryjNCDhpIKoX1qPeBgL0nrUULpV9zUl%2FftsXTNlhVX9UgVzXG9hh4o2KhXLjykyVIYFObJ0n6ZmXALnIVBu8uTKravd0B9vqDK4DmjUigOduT7bSxdY%2F3WWlffFYjvSl6GXtZLFV%2FRGAQf5ruJSy4ftAG36S0ShOSUKpVug6gETqgJF6Pf8SJ4DSPhw3a4jhkIDtvisfiqaxtTGtv2gtBEhFSX4OxjzA5DALQAC890XTAGcv1Ug74XnfPuDWnd6fkwfD2M87X%2BpN%2BnnUWIOwsx1Wlo7UrCj%2BPc4hrUYdqlTavHcTtTzpQPc8KvG3GSpuI6WyXlWSoYjUOHutjguKuizoD8vqoO1MuAP7h97eqfW3DJcU2TUL%2F6mF%2BBD2Py6PmWfB0RQAWPHwzpMWXQAc21QMXvv5qbbiSNzwNwtCm3SAoiXsSKIFrisqNFT2Om3U5CYCR8VodSQcSsAdctfMyqM56VtXMBA9cgDa8Hksu%2FCtBoh5ryXXpX8K86HLkTyQkDHsOD&__VIEWSTATE2=8b3e%2FaCuf1MXmXAUptGCU1uzDjbxlLqEtOHWv%2BJTX8JAyqwCtZxgt9PQbZgkJCxLTbuXLUviZrL7Iv4Ni8mP8A9kPGtbWsF1IeJ1Fn%2BqL8%2ByWNjj2dcO0TeqrN5GBI6GomZJMP11QQ5P3xQeTdxfyyr2MeYWa%2F%2BLu8RNZYHyyVYk5kxaQOwxVxLxaqOmG8X7hFf6LaD12Jtl7quO1hjURSoO64um2s3Dsrr5EU%2FMA7%2BtTMjp3zE8VW3BfH9rK7EE3Hqkpwkt0z4otB0RuK7LyG4V7OgrFbKCU92M8Wg7kLAzMJmox%2BMeL3DkbLf05c54EMxemWAd%2Bey5wtpTRCYX5wAkHlWfy2JrIj3Zk2XDJrEX4vgXo71nEdUgnZwsRg4yx8s1%2BBPXLpDXQgFYrub3l11aNi4onAaobZYj4Ud1m%2BCfLOuvlgvEmdXntXJxw6HSNhmHoKnm2YuiCbtJBI6He%2Bj3u0Iv6g%2F6U0iE9er8n4RQQAEDwx%2BDiQeUFgb81bMQuO25MifxaEHHh2uUA7q5EaAXosWoatUUWN%2FQRR%2BkkozAdJ0ZhOoH2QjhDo%2Bm7VDd8B6z3BfOwAKiIi82RQbxX9kWdTvU9ydqNRQShnJ2g0Nw4ImIomtrNZKh758Dn%2F57sMqGV9Yf%2BKHVYGKOKlQowycUl7XDXA9AnuO5aisGFlNLaBZRxWGQbem2w5q7P0vGNt0%2FxZBya%2BuL79tFB1JLj5L3jLXq63O709Ax8jwAAJf7D5NtxkLeFbwZiaFQSPlyvnfE6VsJu5EkcKEy1bnDUiOO3qan5LtM6F%2Fydyve501kjIt6BwKqKQCfK%2BOmPimE6arVxN1ysE7tDC6PFA56aPZrcmiiwRJmGy4ROGToH9egSwFxrcfMLXq01VEVklVDJ%2BqW4%2BrHz3o%2FyV5A1cDogP6ndVFfkyk51XJt0q%2B6pI5ysO6%2FknpcQK2QJJXq7O7oWEmBv%2BVjT%2FHtXLLf5oKj8qntDxVuImXPLgHKJchSU6U9tay%2FbTqgF5KMZRPSDsZ%2B&__VIEWSTATE3=dIc5DkrqQvxT6QJVcusU9d9i8IuQQIP4dRtXbB9VvSBNdg%2FzrS3ydMXg0nxLKMAC9F5LNOMjyTzih6iG%2BAgpfMGuRbBGKdMlXiQKIECR0yqabbTE66ylOWGuqhUuYVRSMBukM4yuK%2FqnD%2BG5PBWc5D77h1OTmUA23yAZAyA7zw7Tk5tsOKxDyBWFYk%2FNAeyk6Tb6y2QLU0tiwvLLsb2914tw4QEBszLGLcWEAIdKrZvePQ1Wg1GexYBOnxSzTeVDIh24bKPM2fMvdVV36fumog%2BWp1XmlwsPDexgB%2FJJWWor2DfY%2B4X93OZbUU%2BcVrxNz3NYpGrIWCx5%2BaugFJ8cw8F8dJu%2BWlL9gcb1MqnRfhoDj4Sy2B%2BNl41xXemUnUjzF05PuSlQXmnfbwWglDiU%2BW35kvArylI17aiVM%2FeLtBqmbGj30crvky6HttH2qi0YstwNBrwULeanE51kA7ZT4%2F7QzCfJBJXE3GTw7A7pDz3iUHU3xBuXbHLdOh1Foj2tBdHiyNOx8yWMDxh9qnAgKcF0iEg1HChvAjCxVobo0NO48ilBGxkN%2Fiooo6DdZXx76BSVdzM0qYIP6PRtR322E4ahXXUcoAhitw1GfMjusYb5oE6bVGOBkKaW2eKuoqOCXcxIa6p3N8JZ9h8Rvr9sVHtCPzo3YpiQ%2B4DW4rTiiYsGGucbhz8TnURN9qjKcwLYs9pW0br0MkVZyGhuLszWbqdGxSV5O24PYI%2FR84Q%2B4StkRvf7UFuyW1wX2D3mB3TYiHND6yYkQqDfutVrTkrGdknTD7IiTFVrr2fb884zd%2FVx2A1Tif%2F4rn9mxvxJ%2Fikt9IDjGF9mPbsuC6xaBiw%2BVBg%2BToYshXaNGnnrlv1oiauMQGQWc%2F9iIzfPtGWGTFyuMBTasLoNVRwyBEKM9Ir9GIDqRi4qI8Pz6fVHbpqeYWv4geEoiRqgxwliV7kFbKjiYoRvU0BWdqRiAAOH09IAWYza893ibOyPJNKQ91%2BVKXW9gE0v27iepVJed0UCPc0e&__VIEWSTATE4=7ag5PU%2FckOD6FRJ1lxSGbRbc6ycf71fNFZUssbZaFOnAHlklB1CMjUcYJ7gF74mV8%2BkijP9NlXo5DiPhABs2doKKM%2FZvi%2Fi8viCtjRiqmMMoBK1%2FhSw3xb%2BWLexRkr8NaEaQpRU5SrvA8TLgge5wftVOcXQB0AbAoSPrwxaPQkLYHzYmxdiuKd4FDlBqFDT9YaTA9TzKOUy8LvzgtCTqDTxBXVEoYXrpo0Q5Z5bWXS1KXstJOAztsqbjMtSF4cYfaJyi3WQX4uwQRRYGrJJATpKTiGCr6NIixz2vreV3bIJgm8it9%2BBjX4hPjiAzZv4LLQGmLPOmb3GMCJ0ejgcfaAz65gpT3bOR8J5BWWvngvQqzNdr3Er1gnNxSGc2bFRVZrus2LBR7%2BicjNpjmuPwwuVx4ciLb4CQn4%2F7xAswFF0%2Bgq9aaLAdzjqtRo6OjLO5MzpH27HKLo0ONk5Dl31z4wDGTZoBuXruhUAw%2FpZYP6RICBxCd5WtqoIwn0bBP2i8um9hBd9Uj6ADh1tuqTCeqhOx4YcP0hK1Sz5Xif1SgsVyig%2Fogi14c4pdajBZAx4Yt7lpLqyJ70gpku0mtHVa13UtdLEy7WPdt93PHH0T%2B3ACrXveb8znz0RLtAVv%2FjLCOUsjnRgqxkGTrhjPxG%2FmPJ7DbQa02uOzuUiBomsvCDTCLnDpuBH13Qa1AIdcUfGVgrkxSiC46Nzz8JAJo1%2BW1mxlYgBraHlfB14KN308LLz3htnq2Fmc%2FinU6PYq%2Fr5H4mxzc7Qinvex%2Br2T4F84oR6h%2F6bKaVtVYGNc8HXhM1kGge7crBuYxbw8jGkNh4HOqSVRojKpEqLaaCHuSt7ZAwimT5HVpj7Qzfd9KCeuO3wcNjnp94hA9V2PvOWuvdSGGOwmpWyrUmewNYM5ClOJgYNCMsnCOiL59ZzwC3sKrxFx5bh6Up7QeGGem6F9YES3b%2FuczV5nmcUwsGJ0GgGDa0ZwIKK5gxEY5gb8zNwDnBFPz1Y3B1g9LXB94Yr6EQBu&__VIEWSTATE5=82hu0vu574%2BBpne6o6s1em62QfSkGptN60YZOZXBxQdZA1NFvP2cz%2FYuakEVLskaxXL%2BJ9lZcG5GJL0j1UrMOGAxLeXciQg00pJRAuMGHeYDoRCN5WAJHh7xRxkQtCZuWw8nmE%2FmoGa193Q3jxqZPm2Y1wCnaF3iP6N20hFSqfnmnpkybCfkrSzp5gJzSaDe%2FOdlP3mN%2BCJpn0zYlvZ9KEA9u8q%2F83giF5RHOAHznd78woLY4CuCcorh49SAjqfyJtXJ8sLGA%2BWjgtD0V6PxjBzPqzOab%2BntKUPJhquu3s%2ByiP9ZcW1pYIap5kuY%2FRvrO%2BMqZmIDvHsS3M4zPBRlyPRWySTkW9telfH7w1hh3xpM9QIX0HVper%2B7vXVPWuwXXjoVbMlZ9UHj7gCywgv0JcaK2GDeVr2lQbikTk3%2FOuqHQTTTzGd0BQRtgZUnflifpwjwtSLIt2Bhhe%2B04rfAhPGoqFjm9T5EelNJW2i7DjQDOBrYiQ3RhSc7JKpKEdK2aSjdE0FfBuCXhdIZnopQYmhvY8%2FlZaficHB8lCJSQgnsQU8PPGHfLEBxJVwR1tb0jMXE8jgW7%2FToOX3nj7BYckJ4AbZqL08qBhOVFpWl%2FLv9z4vlLMyGFsg1YYXdI1WvZkBUEEve8fyKWqa9SZYYAe4DrmCtJYiLhqGRE991uX5%2BwX%2BtiZcVId2Nubs9kfNDx0vMo9CTbZn4qnRI3INK9MTKyKlcIRm8toWfc%2BAwx1pFMpjVUCAsJAEeYF3OLoGUSJIwVOCm5AIlpmdf0TYo5I%2FW3S0uAx5AvI%2BuKVGCXnqasY8evfJ2Y0vGdXwTUirf8NPnY%2FZikthHXMP2p3vuqmrGxiaA7upOEJnqIcOMKZYc46%2Fvl%2FMbA1hQq7rSoEo4EFmodo0TbCVje3MfnAzY0ilufb2Bvfk%2FscZRLPKOrIEx4b57s65zyM3kLWT0wnYXa7FhTNBSYXF%2BZ7YMk6GntI3ywTf62ULEpdjz45lVZlc3nAIvbFdapyDrhcTPsIQd&__VIEWSTATE6=89coNXpsqNzH%2F5eehS5Mhkk6agD3%2BcSAHidKqEJOyffakaAhq5%2BQqd377eZANtLBFVCqrcxZCnF0t9xxsWGELxUQGAsjE63V7pS7iTM47H8VX%2BVxJI75sIQ2GkZLxOp9RdgSZVw0zVHhC4%2F4tOVXzr95MIuF9LaI4q2LwUzWW1MKXOsOtOeAsWCwFNc2UogfuHMdL5qZ5CkEVvEmLf8hjQITpRUVZC16iGa58d1OdiIfTorTtDDWeh41Z4d8cMW1eQxteF0L3JNjhPwzK7sL6JXxYGB0u2d0sIF4FNcewYkKQtAS2lerkUlGPDGiloNSUk6wjcKo4NFB7BGL4vsAEzdq9qik1Fz4Mm7dn0Iy7XoA6QI6tkf6IGYalTTg3OYbmds2laROplSQhLt2JIH81LiiU9YsuTPoEfffczY6yIeG%2FeKw%2BbPoWg1ntlM00YWRVyqmSLzEw2YK2p8ZsbtfLVx43gkrdeZ1x8XkrLuZzdKbPRZBnLG%2Fr6ppi%2B47zMHq6pdLnItE42k8AsJKvCz11ethLH6%2Bg7DsKmhIC4%2FBjNh29OyMbZ%2BKhnVV%2BHL3yUAj17wXYOWRUKLrX89syWL70cB493CMO1DlOO4gcp%2BpS0eGv%2BypswHv8%2F3cNLqkmXic%2B6Z%2F2Ga8lGoyXU88Z%2BGQ4PM00h%2BtqYc%2ByFohMfmOH72lpzC2PPa8cdIHpYV4MtqC0WX6WQAJj4AzPBwTLFdd01DcNsWifz877wV4l3nQ1bIEuZT%2F%2BdzmDuei0cZOums7HmZZL3qGHfx%2BSIQxcO6DIzOyVK710NfMZo8AIL31v98bdgfCS8Z1euuti7LsuXPtNZhXQaCad2G7lrjglMbcAp7tFN7tKg6f4d97fItrqbjS2AyyND%2BrIAqrfTWnmdE68aElJklSK04i84NAWix%2FTW1VoX5znWijt3Tw09NvHExXdER8GO1Efl8xpkxTetXViPQPbNAti%2FA%2FqO4YLNIV8A3Xa3I%2FDyB%2FChZg7WDpR9CauycoF6vkUB6ydOHeQlD3&__VIEWSTATE7=%2Fj5BxyhxbReKsHlgwzwQjNCId7%2BBSOtaYqHJm08%2Bjx%2F7dDrvfqgwwPKW1YhTKSCoOTxdfrto4h9fJN62Ag3sYB41ye3rcxUaeDKKOtjgEMYrh2LlakW6qeeqy3BshSQAqdmeCNSrz%2BA%2BHIVEvtS7zoR6Fb6366UMc%2BGxFq%2BMoNeyTkqQcRW8dALp13Is9pj%2B8PkheKzTZkHIEbkb4B9r4OKnX6Xj%2BLjzwnGJgsYLTasAuvQwprqr44KsNyCM4Rlpkr%2FymUqc%2FH3M0mQxBAZhPaocyyOZAvTuhmTYlpMrYHB2LvXu2EbpJMI1OW8ZStOZZ8jUfd99CiJ5KmVyw0oKUzDA972us6dYymQFBzvj92jd5%2B%2BVHiFIyynGxTy%2Bjcdg2NF%2FZ4gE4RnAEfTM7fCnDi3JHTfwlyElAwyp3Y901MZJPvr%2Bw%2F7XguW8LpI81R%2FcSkxdEjjD46xUENYtIaBEfmWQhWfI4rF9b05QSFwoNAUDyVay46e%2Fly4s7S%2FMPbeR16m%2FDfxwfMTtSxItglwM1bmQYmmWg%2FbCzwW9obkgZDbxtFt5gLj5nQ4nRAtJLJWfK3jz3uSK8GpVSbLT91MBTJ490VHLFO0lV1XAgmYqfzTtd7mW7BzwlLFHjA7083nC0zClTLNGqny6NZODS2bqAN6xgxqePIiaD7%2F4JTlp1CiQM4%2BEMyMIr2vdwMMfYFGnWDe5PIO26wkImIEnx6wjKSJPblxUCdoMeZFDnRfcEDnyLPd2wqwvceZqeSxA5NjUusrOhIujjfO2cG8ICUxRwmuAlp5mC5X%2F%2B0nw0opPgzCuITbRUbmbBqvD44tQ71WEXtfWa94%2FkHyo9ZlfTeMZ2%2BqtsNc%2Bf6YynxDTT67Y0KkSuOZJxR5UqCJQtC%2Fyt85D0X%2FmEfxkGgjP1j7uLkqBo%2FdHbiXn400599%2Bcv7p%2FE5rrJSpYGCtBf5itmNe9aj8rYVHYoQE0iKxaaaR8Vi0vmQhCfwtZ45MlTn1Vw4KLOacxg4ExSRm6%2FiLsj8LqZCw4&__VIEWSTATE8=qPU62kEHCa3%2FbkVVfoP2rJ4WzyOq4cXgtUUmxFZTN9xWHbBOOVLBr0lXD5eU%2FlpblwYQMevHzN%2Fd%2BLHdoIELmgH09oCXSEwrVFvLzB3XCWnvSUeNI2dtcz1hoAiHSGIcg%2BITAnRSdh15QWGC8wShIJIJoMLR5sXbFevvCA298HZpuIm6HEV1TDjMGn2H8I8x2xuveQ1oPRJ5PxnaGBaiSw7HvZmUHQ3l95M1JzfL1RBlFsxJtMWF4BL1r74OWoTheV4BafHeuQ5MrsO5uu0arIxBaJax90SFlM9UBoJviusp2WCGnYKK8%2BU9JceiLZxemS2Bl%2F53jZFAemETi5OE5iNkP3OAO9jyDIQOr2flRrK0AiuNX700W4Fi%2B0qP5csPzOkynvXhe%2BDEqdyyQDv5byK2jCq4RSLY1l%2Bpc6tJnAIJCnKFqjk6w9yRZWhslPf%2Ff3TUf8VZLlKyZnY%2FuWaLi1miapNN4mgzgwyoEd4DqOGWOn%2F4nE5tcsqCF0H%2FIdej9%2BsMx2%2BFw4gwt%2F41m1PqojCjnbLxb2c3EgvaR%2BrtkJUs%2BmA6NZFlKDZ6xFC6ZqoT28EF6cxzv1s0dPPRMX1NOUp94AkqVZ42WDUSlpemIOj%2FrFCf4gl6GrKUidaIj7CobYp63jyQzIjpdphi9LN7R2lf5Vio8yjKKKSdE4sxSZ3HoK5F7f02%2FK7yKS9NPE7TO%2Bekqeag0A4ieNhLVhjKoJe7scwnDKpPE3EQa0Z7V%2FRHWBdjDrtsnkpXS9yDuC2WNHoh1%2BdjhSui7aNlze81YrdelQBbGbIxtu7swsTi2AFeQwWSTtb2Jvd9cc%2BcyjQHicU%2Fcnk8ft6ydnTNER2%2BW5OSVx7sCTluhg7y7vnJr3liPubz2G4dGE0fcdJjfsQ5%2Bz4iFMtrq7YzaWMyUbu3wT6H5gna0ZSU5Q8wkeKdfuw92dmfMiW%2BH8VYe12dCAd9cXT8JHqEBN%2F0rnCc1KOxQX2EYONf7XDa8CxrZwvaTv3FHGx2VvU4NbaNnYmXEOVG&__VIEWSTATE9=i%2F9Mx0WAVE0wNvCms%2BEWgftV4xX7sqW69iwjV%2F4RTjHiLYuf6nBa85al1oeA884Wn69uhLGlkITbIqzXmt4aWMXmIYCY3mnriErRmwXXZImI%2FBBDSPWerCx8Nxze%2Bbs9JQmBItN2TvXPacsLAY%2FF0SU3npcvEtaVYnbl0%2BRWgjfTgmudikwiC3M8tF9PBVvLY2t4J0SyB5yGYXy1WVbvXIR2Z10SdqmXrdtK3vE7bUhzEYFGBSbVOzRuM9mD%2BqekbWA5PeLtQ%2BeUbtm2KsDsNQyQNNiZ6MEHVnFl8CEbfq44iPsRXBMhGU3Np3diwBNd%2BZzwyZkoOwT5PdhKmOcA9A%2BouVFLW7skiCvErtTO6oJMLCSk35QGj1f%2FDUTFj95BloDtHdVwiKNmn6BposJeOveLFg4xXC2%2FnLCio%2BsdkhCErG95ym61czzba%2FZEXZjsUYqrh0XQicX3H8Ep%2BolMbrf6Fl4g5bHRl8OD2%2FOkmH1ppsxfliCh3PgPqDklfD3tggQGCS6Dl0GSOaQSZfG5K18kypwumvOGAp3WQ70AWq%2BUSzHl25GArnIXUt90PaiG1w6CHW3tlUNwyIQWbnuyJxhjx4O0LehgPTvNjwNe%2BAEstYceX6PnBNWf1RN4PDzH2j43dxiSSw%2BWYF%2B%2BtQRn%2BL7pMGWCBnw0%2BOT3PVfq4K7WYecWa9Lqv4lXPVicbqJ9mFxcLKFk99p6AHe%2F8oClHGMhA4zbFtHd0LLnN2yAWCK6ZACllLM%2BkQaJ04sj0D0REW14pW7sEG%2B3wXfBVEk3BBiJhGtZXtCmSk%2FZV3Z8HW2Sx7IaPRP47N6UkGR2ZhXs6hRtP44y5x95ImuoIM8NnJwbsT3yn%2FhuoWAHtEnf%2FslL%2FDFJxXN2mwvJ9XtmQm2qJMrapNiCUucLXK9hc9Vprw1NbsOnvKOqIDzgZAWyUwv%2FzZGBOCWGiSbx2T%2F60lq%2F%2FiIKK13LnKmWMeAr4qNaVzcjbHvDdggWKOYpQPxSVqSbtWSIZwHmyXxuTWnMw8%2Fi&__VIEWSTATE10=0ArVcdDT%2Fbxg6Z%2B5Lc8liF0OLw5AZH1RbGzsbazEVkB4sMOSy6ck2c18bokGw2%2Bw5HhTOA22dzFa4p8%2F4biTOM%2FscosnD%2FCjzpsKjueEtlanvEVAsV4qA99YDxmRiylq5ATyEXz7fvLOtsJj%2FJtYc%2FGJMqqjs1aStRXE8on%2BwuUjvRyQBO46WfYITZMXTCo3E%2FqcwdLs6oOhJSOanStBgyGTcd09DWfUOtS1hv8v9RjBRpm8r%2FQwBubwiA7ewXIgl%2B0EWc6PjWTZV55F27r21yZ0JsIACxZBnH%2FYJPaZBLMZaPkt%2Bkg8yIMkr%2FoiclslR3oPHnFpkd7xM3K%2Fd48WpcUcWkhBbp97UUDCroUgynvf7jzXfEeCZXmPe9r4XtheEra%2BX0Ablc2tAnuYU3dbUx19S%2Bu30LRIFNloXr98aZ1%2FJd0LY%2F5NeGb2PZNxwcbdLq%2BuzcZ24FFfRhYkX7lJwfztflgx76G650UUVitef5b5SlPJj8%2F%2FOxKb42wsadnYNO4vt05mvSOZ0tl7nNvxUHZ2rgSn6QnJOnZV3fOpW45rov2Pm7XJLJ3j2WYtC0UfplPeDxxZlLtJB9dgK7%2FW1AgcO3HH6h0gn7h8JpieRpaEcivtUNfP526u%2F%2BvWtKcV3059wpuF3V051EA2IO5lQSpS1nNuBLLrWnjBGCUhAixrtH32c3dzrAi1puzEoONdUafPCrnS2HqRrAynMH7rLQyzcMARbt0wEZ3BMmYjgQqgDcZR4nA%2BQzyT5zpRGb2y4wIBn%2Bletj%2B7HO0bB3BsscbDHYS0JwQ6yVKLZGDHkxcGf15A7bacVv4fFDd%2FtlmsRiyPXCUvtTkxY0f%2BC%2F4K4Mdvl0a1H7ClXjOw4kmb25cJj9%2B0cix8SFjEQgZ9rWM9yqo5TKeurLoClZq4%2Bl57Aw%3D%3D&__VIEWSTATEGENERATOR=BDBC9B44&__VIEWSTATEENCRYPTED=&__EVENTVALIDATION=1iek%2B0aH4b7acIndDhcW5yWesK1G%2BvxMZNSc7Cx7qb6rUQcEdWtkmyfKF3oHTKrkTco8mJ3bg0CMX7LwWLyo1uVlkHBxHrmXsCD5Edp8jRUhr3ud1Q7BlZIGFkORGCnfbSlpdQr1xev93fk3nXjt%2BbL0vdly9KtFa97FpSliYf%2F9acPBK5snVFl%2FUaIE1pPwD0ypHn55ZTmP1LkA6IK%2BebRGyJI%2F1ZAlgA1SDmnxd3tu%2Ff7eflvM0WJnylkFrYTKHJrCOcfbE%2BC0yIG7bGUIkSy1UKj9XGu4YxCva%2FEPDHt6iyM9PhgScx%2BdpuFjeniZGkRsb2bDed68TUxM1hUsl%2BplEThZwzFkAcPxJJeJX1h0w9gs2uDAr%2BSsEiAQneEGCMj%2F%2BK48o3c8yZoqL5YWPUv4ghP0nS16Q4xIUUcJ9iTX32rNP%2FXCe%2BDa38RlvJY%2FRQs%2BQOLGz3CWogVldL9NbA%3D%3D&ctl00%24ctl00%24mainContent%24mainContent%24ddlSorting=FullName&ctl00%24ctl00%24mainContent%24mainContent%24ddlPageSize=1000&ctl00%24ctl00%24mainContent%24mainContent%24cbActiveOnly=on&ctl00%24ctl00%24mainContent%24mainContent%24btnPageSize=Refresh'



        def send_request(url, method="GET", data=None):
            """Send a request and return the response."""
            try:
                if method == "POST":
                    response = session.post(url, headers=headers, data=data, proxies=proxy, timeout=10)
                else:
                    response = session.get(url, headers=headers, proxies=proxy, timeout=10)
                response.raise_for_status()
                return response
            except requests.RequestException as e:
                logging.error(f"Request failed for {url}: {e}")
                return None

        for attempt in range(max_retries):
            try:
                logging.info(f"Attempt {attempt + 1} for license type {license_type}, Letter {letter}...")

                # Request 1
                url1 = base_url
                logging.info("Sending request 1...")
                response1 = send_request(url1, method="POST", data=payload1)
                if not response1:
                    raise ValueError("Request 1 failed")

                # Request 2
                url2 = "https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchResults.aspx"
                logging.info("Sending request 2...")
                response2 = send_request(url2)
                if not response2:
                    raise ValueError("Request 2 failed")

                # Request 3
                logging.info("Sending request 3...")
                response3 = send_request(url2, method="POST", data=payload3)
                if not response3:
                    raise ValueError("Request 3 failed")

                # All requests succeeded, return response3
                return response3.text

            except ValueError as e:
                logging.warning(f"Attempt {attempt + 1} failed: {e}")
                if attempt == max_retries - 1:
                    logging.error(f"All {max_retries} attempts failed for license type {license_type}.")
                else:
                    time.sleep(2)  # Backoff before retrying

        return None  # Return None if all retries fail

    def fetch_pages(self, page_number):

        """Fetch data for a single page."""

        url = f"https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchResults.aspx?PageNumber={page_number}"

        payload = {}
        headers = {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cookie': 'AspxAutoDetectCookieSupport=1; ASP.NET_SessionId=venhofdmjistnrcijhkb4i2o',
            'priority': 'u=0, i',
            'referer': 'https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchResults.aspx',
            'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'same-origin',
            'sec-fetch-user': '?1',
            'upgrade-insecure-requests': '1',
            'user-agent': self.get_random_user_agent()
        }

        response = requests.request("GET", url, headers=headers, data=payload)

        return response.text

    def get_total_records(self, html_content):
        """Parse the total number of records from the HTML content."""

        soup = BeautifulSoup(html_content, "html.parser")
        results_header = soup.find("div", class_="ResultsHeaderCenter")
        # check for header tag, if exists, return total number of results
        if results_header:
            text = results_header.find("p").text.strip()
            total_records = int(text.split(" ")[0].replace(",", ""))  # Extract total records as an integer
            print(f"Total records found: {total_records}")
            return total_records
        else:
            logging.warning("Results header not found.")
            return 0

    def calculate_total_pages(self, total_records, records_per_page=1000):
        """Calculate the total number of pages based on records per page."""
        return ceil(total_records / records_per_page)

    def parse_links(self, html_content):
        """Parse links and names from the search results."""
        soup = BeautifulSoup(html_content, "html.parser")
        table = soup.find("table", {"id": "gvLicensees"})

        # If table does not exist
        if not table:
            logging.warning("No table found on this page.")
            return []

        # else return links of each record
        links = []
        for row in table.find("tbody").find_all("tr"):
            name_cell = row.find("a")
            if name_cell:
                name = name_cell.text.strip()
                href = name_cell["href"]
                full_link = self.base_url + href
                links.append({"Name": name, "Link": full_link})

        print(f"Found {len(links)} links.")
        return links

    def fetch_and_parse_record_details(self, link, max_retries=3):
        """Fetch HTML content from the link and parse detailed record information with retries."""

        headers = {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'max-age=0',
            'content-type': 'application/x-www-form-urlencoded',
            'cookie': 'AspxAutoDetectCookieSupport=1; ASP.NET_SessionId=venhofdmjistnrcijhkb4i2o',
            'origin': 'https://www.pfr.maine.gov',
            'priority': 'u=0, i',
            'referer': 'https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/SearchIndividual.aspx',
            'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'same-origin',
            'sec-fetch-user': '?1',
            'upgrade-insecure-requests': '1',
            'user-agent': self.get_random_user_agent(),
        }

        for attempt in range(max_retries):
            # Rotate proxies
            proxy = random.choice(self.proxies)

            try:
                response = requests.get(link, headers=headers, proxies=proxy, timeout=10)
                response.raise_for_status()  # Raise an exception for HTTP errors

                # Parse the HTML content
                soup = BeautifulSoup(response.text, "html.parser")

                # Extract data (adjust selectors as needed)
                full_name = soup.find("h2", {"class": "Name"}).text.strip()
                license_history_table = soup.find("table", {"class": "tbstriped collapsible"})
                license_type_row = license_history_table.find("tbody").find("tr")
                license_type = license_type_row.find_all("td")[0].text.strip()
                issued_date = license_type_row.find_all("td")[1].text.strip()
                expired_date = license_type_row.find_all("td")[2].text.strip()

                attributes_div = soup.find("div", {"class": "DetailGroup Attributes"})

                license_number = ""
                status = ""

                # Extract License Number if it exists
                license_number_tag = attributes_div.find("div", string="License Number:")
                if license_number_tag:
                    license_number = license_number_tag.find_next("div",
                                                                  class_="attributeCell").text.strip() if license_number_tag.find_next(
                        "div", class_="attributeCell") else ""

                # Extract Status if it exists
                status_tag = attributes_div.find("div", string="Status:")
                if status_tag:
                    status = status_tag.find_next("div", class_="attributeCell").find(
                        "a").text.strip() if status_tag.find_next("div",
                                                                  class_="attributeCell") and status_tag.find_next(
                        "div", class_="attributeCell").find("a") else ""

                # return data
                return {
                    "Full_Name": full_name,
                    "License_Type": license_type,
                    "License_Number": license_number,
                    "Status": status,
                    "Professional": license_type,
                    "Issued": issued_date,
                    "Expired": expired_date,
                }

            except requests.exceptions.ProxyError as e:
                logging.error(f"Proxy error for {link}: {e}")
            except requests.exceptions.RequestException as e:
                logging.error(f"Request failed for {link}: {e}")
            except Exception as e:
                logging.error(f"Failed to parse details for {link}: {e}")

            # Wait before retrying
            if attempt < max_retries - 1:
                wait_time = random.uniform(1, 3)  # Random wait time between retries
                print(f"Retrying ({attempt + 1}/{max_retries}) after {wait_time:.2f} seconds...")
                time.sleep(wait_time)

        # If all retries fail, return None
        logging.error(f"All retries failed for {link}")
        return None

    def save_to_csv(self, records):
        """Save records to the CSV file, ensuring no duplicates."""
        try:
            file_exists = os.path.isfile(self.output_file)
            with open(self.output_file, mode='a', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=self.csv_headers)
                if not file_exists:
                    writer.writeheader()

                for record in records:
                    license_number = record["License_Number"]
                    if license_number and license_number not in self.existing_records:
                        writer.writerow(record)
                        self.existing_records.add(license_number)
                        print(f"Saved record: {record}")
        except PermissionError:
            logging.error(f"File {self.output_file} is open. Could not write data.")

    def process_links(self, links):
        """Process each link to fetch and save detailed records."""
        records = []
        count = 1
        print(f"Total Records: {len(links)}")

        # get result for each single page
        for link in links:

            try:
                li = link["Link"]
                record_details = self.fetch_and_parse_record_details(li)

                # if page return is not None, append to total records
                if record_details is not None:
                    records.append(record_details)
            except Exception as e:
                logging.error(f"Failed to process link {link['Link']}: {e}")

            print(f"Record: {count}")

            count += 1

            # Add delay between requests
            time.sleep(random.uniform(2, 5))  # Random delay between 2-5 seconds

        # Save all records to CSV after processing all links
        print(f"Length of records: {len(records)}")
        self.save_to_csv(records)

    def run(self):
        """Run the crawler for all letters A-Z."""
        license_types = ["OST", "MED"]

        for license_type in license_types:

            for letter in map(chr, range(65, 91)):  # Loop from A to Z
                try:

                    # Fetch first page to determine total records and pages
                    first_page_html = self.fetch_page(letter, license_type)

                    total_records = self.get_total_records(first_page_html)

                    # total records
                    if total_records == 0:
                        print(f"No records found for letter: {letter}, Type: {license_type}")
                        continue
                    # Total pages
                    total_pages = self.calculate_total_pages(total_records)

                    print(f"Total pages for letter {letter}, Type: {license_type}: {total_pages}")

                    # Process each page for the current letter
                    if total_pages > 1:
                        for page_number in range(1, total_pages + 1):
                            params_current_page = {"LastName": letter, "PageNumber": page_number}
                            print(params_current_page)
                            page_html_content = self.fetch_pages(page_number)

                            # Parse links from the current page's search results
                            links = self.parse_links(page_html_content)

                            # Process each link to fetch detailed data
                            self.process_links(links)
                    else:
                        print(f"Processing Links for: {letter}, Type: {license_type}")

                        links = self.parse_links(first_page_html)

                        # Process each link to fetch detailed data
                        print(f"Getting Details for: {letter}, Type: {license_type}")

                        self.process_links(links)

                    print(f"Completed processing for letter: {letter}, Type: {license_type}")

                except Exception as e:
                    logging.error(f"Failed to process letter {letter}: {e}")


if __name__ == "__main__":
    BASE_URL = "https://www.pfr.maine.gov/ALMSOnline/ALMSQuery/"
    OUTPUT_FILE = "result/result.csv"

    crawler = LicenseCrawler(base_url=BASE_URL, output_file=OUTPUT_FILE)
    crawler.run()
